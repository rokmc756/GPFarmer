# Deploy ssh key and make sudo work without password
# install 'sshpass' package first on your local system

# ssh -o UserKnownHostsFile=./known_hosts <user>@<host>
# ansible all --ask-pass --ssh-common-args='-o UserKnownHostsFile=./known_hosts' -m ping -i <host>, -u <username>
#                                                                                               ^^^ the comma is required
# ansible-playbook -i <host>, -u <username> --ask-pass --ask-become-pass --ssh-common-args='-o UserKnownHostsFile=./known_hosts' install-ansible-prereqs.yml
#                          ^^^ the comma is required
# rm -f ./known_hosts

- hosts: all
  become: yes
  gather_facts: true
  tasks:
    - name: Install sshpass
      yum: name=sshpass state=present

    - name: Add the inventory into /etc/hosts
      template:
        src: "{{ playbook_dir }}/hosts.j2"
        dest: /etc/hosts
        owner: root
        group: root
        mode: 0644

- hosts: all
  become: yes
  become_user: gpadmin
  gather_facts: False
  tasks:
    - name: Check .ssh local directory exists
      stat:
        path: "~/.ssh"
      register: ssh_directory_exists_check

    - name: Check needed OS tools exist
      shell: which sshpass ssh-keygen ssh-copy-id
      register: os_tools_exist
      ignore_errors: true

    - name: Fail execution if any of the needed OS tools is missing
      fail:
        msg: "One or more of the: sshpass, ssh-keygen, ssh-copy-id are missing on this machine. Please install them - using your distribution's recommended method - before continuing."
      when: os_tools_exist.rc != 0

    - name: Create ~/.ssh directory in gpadmin home
      file:
        path: "~/.ssh"
        state: directory
        mode: "0700"
        owner: gpadmin
        group: gpadmin
      register: ssh_directory_creation
      when: ssh_directory_exists_check is defined and ssh_directory_exists_check.stat.exists == false

    - name: Check .ssh key file exists
      stat:
        path: "~/.ssh/{{ item }}"
      register: ssh_key_file_exists_check
      with_items:
        - "{{ssh_key_filename}}"
        - "{{ssh_key_filename}}.pub"

    - name: Adding the fingerprint
      shell: "ssh-keyscan -t rsa {{ item }} >> ~/.ssh/known_hosts"
      register: ssh_fingerprint_add
      with_items:
        - "{{ groups['all'] }}"
          #      when:
          #- inventory_hostname in groups['master']

    - name: Generate ssh key on local machine
      shell: "/usr/bin/ssh-keygen -t rsa -f ~/.ssh/{{ssh_key_filename}} -P ''"
      register: ssh_key_creation
      when:
        - ssh_key_file_exists_check is defined and ssh_key_file_exists_check.results[0].stat.exists == false and ssh_key_file_exists_check.results[1].stat.exists == false
      failed_when: ssh_key_creation.rc != 0

    - name: Distribute the ssh key to the remote hosts
      shell: "sshpass -p \"{{remote_machine_password}}\" ssh-copy-id -i ~/.ssh/{{ssh_key_filename}}.pub \"{{remote_machine_username}}@{{item}}\""
      register: ssh_copy_id_execution
      with_items:
        - "{{ groups['all'] }}"
      failed_when:
        - ssh_copy_id_execution.rc != 0

- hosts: all
  become_user: gpadmin
  gather_facts: false
  tasks:
    - name: Check ssh to remote hosts works
      shell: "hostname; id"
      register: ssh_connection_test
      failed_when: ssh_connection_test.rc != 0

    - name: Print the connectivity test results
      debug:
        var: ssh_connection_test.stdout_lines


# FIXME: Debian versus Red Hat
- hosts: all
  # will be selected on a per-task basis, to accomodate different methods
  become: no
  tasks:
    - block:
      - name: Install sudo (Red Hat)
        yum: name={{ item }} state=present
        with_items:
          - sudo
        become: true
        become_method: su
        become_user: root

      - name: Add user to 'wheel' group (Red Hat)
        user:
          name: "{{ ansible_user }}"
          group: wheel
        become: true
        become_method: su
        become_user: root

      - name: Add group to /etc/sudoers file without password (Red Hat)
        # this will overwrite the first line which starts with %wheel
        lineinfile: "dest=/etc/sudoers state=present regexp='^%wheel' line='%wheel ALL=(ALL) NOPASSWD: ALL'"
        become: true
        become_method: sudo
        become_user: root
      when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS"

    - block:
      - name: Read /etc/group entries
        shell: "/usr/bin/getent group | grep ^sudo{{':'}} | cut -f4 -d{{':'}}"
        register: etc_group
        changed_when: false

      - name: Split group members
        set_fact:
          etc_group_members: "{{ etc_group.stdout.split(',') }}"
        changed_when: false

      - block:
        # the current user is not in /etc/group in the sudo group
        # we assume that 'su' works
        - name: Install sudo (Debian)
          apt: name={{ item }} state=present
          with_items:
            - sudo
          become: true
          become_method: su
          become_user: root

        - name: Add user to 'sudo' group (Debian)
          user:
            name: "{{ ansible_user }}"
            group: sudo
          become: true
          become_method: su
          become_user: root

        - name: Add group to /etc/sudoers file without password (Debian)
          # this will overwrite the first line which starts with %sudo
          lineinfile: "dest=/etc/sudoers state=present regexp='^%sudo' line='%sudo ALL=(ALL) NOPASSWD: ALL'"
          become: true
          become_method: su
          become_user: root
        when: ansible_user not in etc_group_members

      - block:
        # the current user is already in /etc/group in the sudo group
        # we assume that 'sudo' works, but maybe with password
        - name: Add group to /etc/sudoers file without password (Debian)
          # this will overwrite the first line which starts with %sudo
          lineinfile: "dest=/etc/sudoers state=present regexp='^%sudo' line='%sudo ALL=(ALL) NOPASSWD: ALL'"
          become: true
          become_method: sudo
          become_user: root
        when: ansible_user in etc_group_members

      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Create .bash_history if not exist
      copy:
        dest: /home/{{ ansible_user }}/.bash_history
        content: ""
        force: no
      become: false

    - name: Add sudo line to bash history
      lineinfile:
        dest: /home/{{ ansible_user }}/.bash_history
        line: "sudo /bin/bash --login"
        state: "present"
      become: false
