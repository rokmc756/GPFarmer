---
- name: Check if Any Version of Greenplum Database is Installed
  stat: path={{ gpdb.base_dir }}/greenplum-db
  register: gpdb_installed
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments'] )


- name: Sanity Check for {{ gpdb.base_dir }}/greenplum-db
  fail: msg="{{ gpdb.base_dir }}/greenplum-db is not existed"
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - gpdb_installed.stat.exists != True or gpdb_installed.stat.islnk != True


- name: Set Java Home and PXF Version Info
  set_fact:
    java_home: "/usr/lib/jvm/jre-1.8.0"
    pxf_binary_type: "rpm"
    pxf_arch_type: "x86_64"
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )


- name: Set PXF Package Name
  set_fact:
    pxf_package_name: pxf-{{ pxf.gpdb_version }}-{{ pxf.major_version }}.{{ pxf.minor_version }}-{{ pxf.patch_version }}.{{ pxf.os_version }}.{{ pxf.arch_type }}.{{ pxf.binary_type }}
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )


- name: Set Java Home and PXF Version Info
  set_fact:
    java_home: "/usr/lib/jvm/java-8-openjdk-amd64/jre"
    pxf_binary_type: "deb"
    pxf_arch_type: "amd64"
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )


- name: Set PXF Package Name
  set_fact:
    pxf_package_name: pxf-{{ pxf.gpdb_version }}-{{ pxf.major_version }}.{{ pxf.minor_version }}-{{ pxf.patch_version }}-{{ pxf.os_version }}-{{ pxf.arch_type }}.{{ pxf.binary_type }}
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )


- name: Install Java RPM Package for PXF
  package: name="java-1.8.0" state=present
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int >= 5


- name: Install Java Depend Package for PXF
  package: name={{ item }} state=present
  with_items:
    - openssl
    - libssl-dev
    - openjdk-8-jdk
    - openjdk-8-jre
    - openjdk-8-demo
    - openjdk-8-jre-dcevm
    - openjdk-8-jdk-headless
    - openjdk-8-jre-zero
    - openjdk-8-source
    - openjdk-8-jre-headless
    - openjdk-8-dbg
    - openjdk-8-doc
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"


- name: Copy the PXF .{{ pxf.binary_type }} File to All Hosts in Greenplum Cluster
  copy: src={{ pxf_package_name }} dest={{ gpdb.admin_home_dir }}/{{ pxf_package_name }} mode=0644 owner=gpadmin group=gpadmin
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']


- name: Install PXF Package on Each Greenplum Database Hosts Using Package Management Utility for RedHat/CentOS/Rocky
  yum:
    name: "{{ gpdb.admin_home_dir }}/{{ pxf_package_name }}"
    state: present
    disable_gpg_check: true
  async: 60
  poll: 5
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky"


- name: Install PXF DEB Package on Each Greenplum Database Hosts Using Package Management Utility for Ubuntu/Debian
  apt:
    deb: "{{ gpdb.admin_home_dir }}/{{ pxf_package_name }}"
    state: present
  async: 60
  poll: 5
  when:
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']
    - ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"


- name: Set the Ownership and Permissions of the PXF Installation Files to Enable Access By the GPAdmin User
  file:
    path: "{{ item }}"
    owner: gpadmin
    group: gpadmin
    mode: 0755
  with_items:
    - "{{ gpdb.base_dir }}/pxf-{{ pxf.gpdb_version }}"
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']


- name: Add the PXF Binary Directory to the PXF Ownerâ€™s $PATH
  become_user: gpadmin
  lineinfile:
    path: "{{ gpdb.admin_home_dir }}/.bashrc"
    line: "{{ item }}"
    insertafter: EOF
  with_items:
    - "export PATH=$PATH:/usr/local/pxf-{{ pxf.gpdb_version }}/bin"
    - "export JAVA_HOME={{ java_home }}"
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']


- name: Chown GPAmdin User for PXF Directory
  file:
    dest: "{{ gpdb.base_dir }}/pxf-{{ pxf.gpdb_version }}"
    owner: gpadmin
    group: gpadmin
    mode: u=rwX,g=rX,o=rX
    recurse: yes
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']


- name: Change JAVA_HOME in PXF_HOME/conf/pxf-env.sh
  become_user: gpadmin
  lineinfile:
    dest: /usr/local/pxf-{{ pxf.gpdb_version }}/conf/pxf-env.sh
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^# export JAVA_HOME=/usr/java/default', line: 'export JAVA_HOME={{ java_home }}', state: present }
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']


#    source ~/.bashrc && source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && export JAVA_HOME={{ java_home }} && PXF_CONF=/usr/local/pxf-{{ pxf.gpdb_version }}/conf /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster register
- name: Export the PXF JAVA_HOME Setting and Run the PXF Cluster Init Command to Initialize the PXF Service on All GPDB Hosts
  become_user: gpadmin
  shell: |
    source ~/.bashrc && export PXF_CONF=/usr/local/pxf-{{ pxf.gpdb_version }}/conf && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster register
  args:
    executable: /bin/bash
  register: init_pxf_cluster
  when: inventory_hostname in groups['master']
  # pxf cluster init has been deprecated


- name: Print Initializtion of PXF Cluster
  debug: msg={{ init_pxf_cluster }}
  when: inventory_hostname in groups['master']


# source /usr/local/greenplum-db/greenplum_path.sh && export PXF_BASE=/usr/local/pxf-{{ pxf.gpdb_version }} && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster sync
- name: Synchronize the PXF Server Configuration to the Greenplum Cluster
  become_user: gpadmin
  shell: |
    source ~/.bashrc && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster sync
  register: sync_pxf_cluster
  args:
    executable: /bin/bash
  when: inventory_hostname in groups['master']


- name: Print Initializtion of PXF Cluster
  debug: msg={{ sync_pxf_cluster }}
  when: inventory_hostname in groups['master']


# source ~/.bashrc && source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && export JAVA_HOME={{ java_home }} && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster start
- name: Run the PXF Cluster Start Command to Start PXF on Each Sgment Hosts
  become_user: gpadmin
  shell: |
    source ~/.bashrc && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster start
  args:
    executable: /bin/bash
  register: start_pxf_cluster
  when: inventory_hostname in groups['master']


- name: Print Staring PXF Cluster
  debug: msg={{ start_pxf_cluster }}
  when: inventory_hostname in groups['master']


#- pause:
#    seconds: 60

# source ~/.bashrc && source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && export JAVA_HOME={{ java_home }} && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster start
#- name: Run the PXF Cluster Status Command to check PXF on Each Sgment Hosts
#  become_user: gpadmin
#  shell: |
#    source ~/.bashrc && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster status
#  args:
#    executable: /bin/bash
#  register: status_pxf_cluster
#  when: inventory_hostname in groups['master']
#
#
#- name: Print the Status of PXF Cluster
#  debug: msg={{ status_pxf_cluster }}
#  when: inventory_hostname in groups['master']


#- meta: end_play

- name: Verify that Database for PXF Extention is Installed
  become_user: gpadmin
  shell: |
    source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -tAc "SELECT 100 FROM pg_database WHERE datname='{{ pxf.database_name }}';"
  args:
    executable: /bin/bash
  register: pxf_database_installed
  when: inventory_hostname in groups['master']


- name: Create Database for PXF
  become_user: gpadmin
  shell: |
    source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && createdb {{ pxf.database_name }}
  args:
    executable: /bin/bash
  register: pxf_database_created
  when: inventory_hostname in groups['master'] and '100' not in pxf_database_installed.stdout


- name: Create the PXF Extension
  become_user: gpadmin
  shell: |
    source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ pxf.database_name }} -c "CREATE EXTENSION pxf;"
  args:
    executable: /bin/bash
  register: pxf_extension_created
  when: inventory_hostname in groups['master'] and '100' not in pxf_database_installed.stdout


- name: Check if PXF Extension is Installed on Greenplum Database
  become_user: gpadmin
  shell: |
    source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ pxf.database_name }} -c "select count(*) FROM pg_extension where extname='pxf';" | tr -d " " | sed '/^$/d'
  args:
    executable: /bin/bash
  register: pxf_extension_install_checked
  when: inventory_hostname in groups['master'] and '100' not in pxf_database_installed.stdout


- debug: msg={{ pxf_extension_install_checked.stdout }}
  become_user: gpadmin
  when: inventory_hostname in groups['master']


- name: Create User for PXF
  become_user: gpadmin
  shell: |
    source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -c "CREATE USER {{ pxf.username }};"
  args:
    executable: /bin/bash
  register: pxf_user_created
  when: inventory_hostname in groups['master'] and '100' not in pxf_database_installed.stdout


- name: Add a Role into User for PXF
  become_user: gpadmin
  shell: |
    source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -c "ALTER ROLE {{ pxf.username }} superuser createdb;"
  args:
    executable: /bin/bash
  register: pxf_role_added
  when: inventory_hostname in groups['master'] and '100' not in pxf_database_installed.stdout


- name: Grant a Specific Role Access to the PXF Protocol
  become_user: gpadmin
  shell: |
    source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ pxf.database_name }} -c "GRANT SELECT ON PROTOCOL pxf TO {{ pxf.username }};"
  args:
    executable: /bin/bash
  register: pxf_role_access_granted
  when: inventory_hostname in groups['master'] and '100' not in pxf_database_installed.stdout


- name: Write Data to an External Data Store with PXF
  become_user: gpadmin
  shell: |
    source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ pxf.database_name }} -c "GRANT INSERT ON PROTOCOL pxf TO {{ pxf.username }};"
  args:
    executable: /bin/bash
  register: pxf_data_writed
  when: inventory_hostname in groups['master'] and '100' not in pxf_database_installed.stdout


#- name: Synchronize the PXF Server Configuration to the Greenplum Cluster
#  become_user: gpadmin
#  shell: ( source /usr/local/greenplum-db/greenplum_path.sh && export PXF_BASE=/usr/local/pxf-{{ pxf.gpdb_version }} && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster status )
#  register: sync_pxf
#  until: sync_pxf is succeeded
#  retries: 5
#  delay: 30
#  args:
#    executable: /bin/bash
#  when: inventory_hostname in groups['master']


# source /usr/local/greenplum-db/greenplum_path.sh && export PXF_BASE=/usr/local/pxf-{{ pxf.gpdb_version }} && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster start
- name: Restart PXF Server Configuration to the Greenplum Cluster
  become_user: gpadmin
  shell: |
    . /home/gpadmin/.bashrc && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster restart
  register: restart_pxf
  until: restart_pxf is succeeded
  retries: 5
  delay: 30
  args:
    executable: /bin/bash
  when: inventory_hostname in groups['master']


- name: Run the PXF Cluster Status Command to check PXF on Each Sgment Hosts
  become_user: gpadmin
  shell: |
    source ~/.bashrc && /usr/local/pxf-{{ pxf.gpdb_version }}/bin/pxf cluster status
  args:
    executable: /bin/bash
  register: status_pxf_cluster
  when: inventory_hostname in groups['master']


- name: Print the Status of PXF Cluster
  debug: msg={{ status_pxf_cluster }}
  when: inventory_hostname in groups['master']



