---
- name: Create hostfile_all file for All Nodes
  lineinfile:
    path: "/tmp/hostfile_all"
    line: "{{ hostvars[item]['ansible_hostname'] }}"
    state: present
    create: yes
  register: hostfile_all_created
  ignore_errors: true
  with_items: "{{ groups['all'] }}"
  when: ( inventory_hostname in groups['master'] )


- name: Check if Any Version of Greenplum MPP Database is Already Linked
  stat: path={{ gpdb.base_dir }}/{{ gpdb.pkg_name }}
  register: check_gpdb_link
  ignore_errors: true


- name: Check if the Greenplum MPP Database Version is Already Installed
  stat: path={{ gpdb.base_dir }}/{{ gpdb.pkg_name }}-{{ gpdb.major_version }}.{{ gpdb.minor_version }}.{{ gpdb.patch_version }}
  register: check_gpdb_dir
  ignore_errors: true


- name: Sanity Check for {{ gpdb.base_dir }}/{{ gpdb.pkg_name }}
  fail: msg="Greenplum MPP Database Software is not existed"
  ignore_errors: true
  when: check_gpdb_dir.stat.exists != True and check_gpdb_link.stat.islnk != True


- name: Set Name for Binary Installer File ( Name Includes Build Number )
  set_fact:
    gpdb_dir: "{{ gpdb.pkg_name }}-{{ gpdb.major_version }}.{{ gpdb.minor_version }}.{{ gpdb.patch_version }}"
    gpdb_package_name: "{{ gpdb.pkg_name }}-{{ gpdb.major_version }}.{{ gpdb.minor_version }}.{{ gpdb.patch_version }}-{{ gpdb.major_version }}"
    binary_installer_file: "{{ gpdb.pkg_name }}-{{ gpdb.major_version }}.{{ gpdb.minor_version }}.{{ gpdb.patch_version }}.{{ gpdb.os_name }}-{{ gpdb.arch_name }}"
  ignore_errors: true


- name: Identify Greenplum MPP Database Uninstallation
  set_fact:
    gpdb_uninstall: true
  ignore_errors: true
  when: check_gpdb_dir.stat.exists == True and check_gpdb_link.stat.islnk == True


- name: Identify Greenplum MPP Database Linkchange
  set_fact:
    gpdb_unlinkchange: true
  ignore_errors: true
  when: check_gpdb_dir.stat.exists == True and check_gpdb_link.stat.islnk == True


- name: Greenplum MPP Database Uninstallation
  debug: msg="Uninstall Greenplum MPP Database"
  ignore_errors: true
  when: gpdb_uninstall == true


- name: Greenplum MPP Database Linkchange
  debug: msg="Delete link to Greenplum MPP Database version"
  ignore_errors: true
  when: gpdb_unlinkchange == True


- name: Greeenplum MPP Database - Nothing to Do
  debug: msg="Nothing to do (Uo Uninstall/Delete Link Required)"
  ignore_errors: true
  when: gpdb_uninstall == False and gpdb_unlinkchange == False


# Database Uninstallation
- name: Check if Greenplum MPP Database is Running
  stat: path=/tmp/.s.PGSQL.5432
  register: gpdb_running
  ignore_errors: true
  when: inventory_hostname in groups['master'] and ( gpdb_uninstall == True or gpdb_unlinkchange == True )


- name: Verify that Greenplum MPP Database is Up and Running
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/{{ gpdb.pkg_name }}/greenplum_path.sh && psql -c "SELECT VERSION()" )
  register: select_version
  ignore_errors: true
  failed_when: "'(Greenplum Database ' not in select_version.stdout"
  when: inventory_hostname in groups['master']


- name: Shutdown Greenplum MPP Database
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/{{ gpdb.pkg_name }}/greenplum_path.sh && gpstop -a )
  async: 60
  poll: 5
  register: shutdown_database
  ignore_errors: true
  when: ( inventory_hostname in groups['master'] and gpdb_running.stat.exists == true and "'(Greenplum Database ' not in select_version.stdout" )


- name: Uninstall Greenplum MPP Database Software Package
  package:
    name: "{{ remove_pkg_name }}"
    state: absent
  ignore_errors: true
  async: 60
  poll: 5
  when: ( gpdb_uninstall == True and gpdb_unlinkchange == True )


- name: Delete {{ gpdb.coordinator_data_dir }} for Master Data Directories
  file:
    path: "{{ gpdb.coordinator_data_dir }}"
    state: absent
  ignore_errors: true
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and ( gpdb_uninstall == True and gpdb_unlinkchange == True )


- name: Delete {{ gpdb.data_dir }} Segment Data Directories
  file:
    path: "{{ gpdb.data_dir }}/{{ item }}"
    state: absent
  ignore_errors: true
  with_items:
    - "primary"
    - "mirror"
    - ""
  when: inventory_hostname in groups['segments'] and ( gpdb_uninstall == True and gpdb_unlinkchange == True )


- name: Delete gpinitsystem Config File and hostlist File
  file:
    path: "{{ item }}"
    state: absent
  ignore_errors: true
  with_items:
    - "/home/gpadmin/gpinitsystem_config"
    - "/home/gpadmin/hostfile"
    - "/home/gpadmin/hostfile_all"
  when: inventory_hostname in groups['master'] and ( gpdb_uninstall == True or gpdb_unlinkchange == True )


- name: Delete SSH Public Keys and Remaining Settings in All Hosts
  file:
    path: "{{ item }}"
    state: absent
  ignore_errors: true
  with_items:
    - "/home/gpadmin/{{ binary_installer_file }}.{{ gpdb.binary_type }}"
    - "/etc/sysctl.d/98-sysctl-gpdb.conf"
  when: ( gpdb_uninstall == True or gpdb_unlinkchange == True )


- name: Delete Greenplum MPP Database Directories
  file:
    path: "{{ item }}"
    state: absent
  ignore_errors: true
  with_items:
    - "{{ gpdb.base_dir }}/{{ gpdb.pkg_name }}"
    - "{{ gpdb.base_dir }}/{{ gpdb_dir }}"
  when: ( gpdb_uninstall == True and gpdb_unlinkchange == True )


- name: Greenplum MPP Database Uninstallation
  debug: msg="Greenplum MPP Database {{ gpdb.major_version }}.{{ gpdb.minor_version }} uninstalled"
  when: gpdb_uninstall == True
  ignore_errors: true
  notify:
    - Reload Sysctl
    - Start IPtables
    - Start Firewalld
    - Enable SELinux
    - Restart System
    - Waiting for Server to Come Back after Reboot

