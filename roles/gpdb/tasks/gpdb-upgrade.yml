---

# Upgrade Greenplum Database on Red Hat / CentOS
# upgrade: {{ gpdb_base_dir }}/greenplum-db-{ new version } must not exist
# linkchange: {{ gpdb_base_dir }} /greenplum-db points to another directory

#
- name: Check if GPDB link is already existed
  stat: path={{ gpdb_base_dir }}/greenplum-db
  register: gpdb_linked

#
- name: Check if the GPDB is already installed
  stat: path={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}
  register: gpdb_installed

#
- name: Sanity check for {{ gpdb_base_dir }}/greenplum-db
  fail: msg="{{ gpdb_base_dir }}/greenplum-db is supposed to be a symlink!"
  when: gpdb_linked.stat.exists == True and gpdb_linked.stat.islnk != True

#
- name: Set name for binary installer file ( name includes build number )
  set_fact:
    binary_installer_file: greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}.{{ gpdb_build_version }}-{{ gpdb_rhel_name }}-x86_64
  when: gpdb_build_version is defined and gpdb_build_version != None

#
- name: Set name for binary installer file ( name does not include build number )
  set_fact:
    binary_installer_file: greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}-{{ gpdb_rhel_name }}-x86_64
  when: gpdb_build_version is not defined or (gpdb_build_version is defined and gpdb_build_version == None)

#
- name: Set default values for run mode variables
  set_fact:
    gpdb_upgrade: False
    gpdb_linkchange: False

# If {{ gpdb_base_dir }}/greenplum-db-{ new version } does not exists, it's an upgrade
- name: Identify Greenplum Database Upgrade
  set_fact:
    gpdb_upgrade: True
  when: gpdb_linked.stat.exists == True and gpdb_installed.stat.exists != True

# If the link points to a different existing directory, it's a link change
- name: Identify Greenplum Database Linkchange
  set_fact:
    gpdb_linkchange: True
  when: ( gpdb_linked.stat.exists == True and gpdb_installed.stat.exists == True and gpdb_linked.stat.lnk_source != "{{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}" )

#
- name: Check if database is running
  stat: path=/tmp/.s.PGSQL.5432
  register: gpdb_running
  when:
    - inventory_hostname in groups['master']
    - gpdb_upgrade == True or gpdb_linkchange == True

- debug: msg={{ gpdb_running }}

#
- name: Shutdown database
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpstop -a )
  async: 60
  poll: 5
  register: database_shutdowned
  when:
   - inventory_hostname in groups['master']
   - ( gpdb_upgrade == True or gpdb_linkchange == True ) and gpdb_running.stat.exists == True

- debug: msg={{ database_shutdowned }}

#
- name: Copy Greenplum Database {{ gpdb_major_version }} {{ gpdb_binary_type }} rpm package
  copy: src={{ binary_installer_file }}.rpm dest=/home/gpadmin/{{ binary_installer_file }}.rpm mode=0644 owner=gpadmin group=gpadmin
  when:
    - gpdb_upgrade == True or gpdb_linkchange == True
    - gpdb_binary_type == 'rpm'

#
- name: Install Greenplum Database software in {{ gpdb_base_dir }}
  yum:
    name: /home/gpadmin/{{ binary_installer_file }}.rpm
    state: latest
  async: 60
  poll: 5
  register: gpdb_software_install
  when:
    - gpdb_upgrade == True or gpdb_linkchange == True
    - gpdb_binary_type == 'rpm'

- debug: msg={{ gpdb_software_install }}

#
- name: Update the permissions for the new installation
  become: true
  file:
    path: "{{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}"
    state: directory
    recurse: yes
    owner: gpadmin
    group: gpadmin
  when:
    - gpdb_upgrade == True or gpdb_linkchange == True

#
- name: Replace database directory
  replace:
    path: "{{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}/greenplum_path.sh"
    regexp: "^(.*)GPHOME=(.*)$"
    replace: "GPHOME={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}"
    backup: yes
  when:
    - gpdb_upgrade == True or gpdb_linkchange == True
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby']

#
- name: Replace source .bashrc in gpadmin home directory
  become: true
  replace:
    path: /home/gpadmin/.bashrc
    regexp: "^(.*)source(.*)$"
    replace: "source {{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}/greenplum_path.sh"
    backup: yes
  when:
    - gpdb_upgrade == True or gpdb_linkchange == True
    - inventory_hostname in groups['master'] or inventory_hostname in groups['standby']

#
- name: Delete a symlink to point the old GPDB version
  become: true
  file:
    path: "{{ gpdb_base_dir }}/greenplum-db"
    state: absent
  when:
    - gpdb_upgrade == True or gpdb_linkchange == True

#
- name: Uupdate the link to point to the newly installed GPDB version
  file: path={{ gpdb_base_dir }}/greenplum-db src={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }} state=link
  when:
    - gpdb_upgrade == True or gpdb_linkchange == True

# the greenplum_path.sh from the new installation does not have $MASTER_DATA_DIRECTORY
- name: Add MASTER_DATA_DIRECTORY to greenplum_path.sh
  lineinfile:
    dest: "{{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}/greenplum_path.sh"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^export MASTER_DATA_DIRECTORY=', line: 'export MASTER_DATA_DIRECTORY={{ gpdb_data_dir }}/master/gpseg-1', state: present }
  when:
    - gpdb_upgrade == True or gpdb_linkchange == True

#
- name: Start Greenplum Database after upgrade
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpstart -a )
  async: 60
  poll: 5
  register: gpdb_started
  when:
    - inventory_hostname in groups['master']
    - gpdb_upgrade == True or gpdb_linkchange == True

- debug: msg={{ gpdb_started }}

