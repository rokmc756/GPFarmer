- name: Get Network Interface name From Prefix of IP Addresses Provided for Greenplum Nodes
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', gpdb.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev1: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', gpdb.net.ipaddr1 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', gpdb.net.ipaddr2 ) | map(attribute='device') | first }}"


- name: Get IP Address from Provided Network Device Name
  set_fact:
    ipaddr0: "{{ hostvars[inventory_hostname]['ansible_'~netdev0].ipv4.address }}"
    ipaddr1: "{{ hostvars[inventory_hostname]['ansible_'~netdev1].ipv4.address }}"
    ipaddr2: "{{ hostvars[inventory_hostname]['ansible_'~netdev2].ipv4.address }}"


# https://stackoverflow.com/questions/36328907/ansible-get-all-the-ip-addresses-of-a-group
- name: Define Facts For All GPHOST's Hostname
  set_fact:
    all_ext1_hostnames: "{{ groups['all'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
- debug: msg={{ all_ext1_hostnames }}


- name: Define Fact For All Hosts of First IP Addresses
  set_fact:
    all_net0_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev0, 'ipv4', 'address']) | join(',') }}"
- debug: msg={{ all_net0_ipaddrs }}


- name: Set Default Network Device and Address
  set_fact:
    _netdev: "{{ 'ansible_'~ netdev1 }}"
    _ipaddr: "{{ ipaddr1 }}"



- name: Set Default Values for Run Mode Variables
  set_fact:
    gpdb_install: False
    gpdb_linkchange: False

- name: Identify Greenplum Database Installation
  set_fact:
    gpdb_install: True
  when: gpdb_dir_existed.stat.exists != True and gpdb_dir_existed.stat.exists != True


# If the link points to a different existing directory, it's a link change
- name: Identify Greenplum Database Linkchange
  set_fact:
    gpdb_linkchange: True
  when: gpdb_link_existed.stat.exists != True


- name: Greenplum Database Installation
  debug: msg="New Greenplum Database installation"
  when: gpdb_install == True


- name: Greenplum Database Link Change
  debug: msg="Changing link to Greenplum Database version"
  when: gpdb_linkchange == True


- name: Greenplum Database - Nothing to do
  debug: msg="Nothing to do (no installation/upgrade required)"
  when: gpdb_install == False and gpdb_linkchange == False


- name: Set Name for Binary Installer File ( Name Includes Build Number )
  set_fact:
    binary_installer_file: "{{ gpdb.package_name }}-{{ gpdb.major_version }}.{{ gpdb.minor_version }}{{ gpdb.build_version }}-{{ gpdb.os_name }}-{{ gpdb.arch_name }}"
    install_path: "{{ gpdb.package_name }}-{{ gpdb.major_version }}.{{ gpdb.minor_version }}{{ gpdb.build_version }}"
  when: gpdb.build_version is defined and gpdb.build_version != None


- name: Set Name for Binary Installer File ( Name Does Not Include Build Number )
  set_fact:
    binary_installer_file: "{{ gpdb.package_name }}-{{ gpdb.major_version }}.{{ gpdb.minor_version }}{{ gpdb.build_version }}-{{ gpdb.os_name }}-{{ gpdb.arch_name }}"
    install_path: "{{ gpdb.package_name }}-{{ gpdb.major_version }}.{{ gpdb.minor_version }}{{ gpdb.build_version }}"
  when: gpdb.build_version is not defined or ( gpdb.build_version is defined and gpdb.build_version == None )


- set_fact:
    gpdb_network_range: "{{ hostvars[inventory_hostname][_netdev]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- name: Get the Specific IP Address for All Hosts
  set_fact:
    prod_ip_addr_range: "{{ item }}"
  with_items: "{{ ansible_all_ipv4_addresses }}"
  when: "item | ansible.utils.ipaddr( gpdb_network_range )"

- name: Print the Value of SHMALL
  shell: "echo $(expr $(getconf _PHYS_PAGES) / 2)"
  register: shmall_fact


- name: Set Fact for SHMALL
  set_fact:
    shmall_var: "{{ shmall_fact.stdout }}"


- name: Set Fact for SHMALL
  set_fact:
    shmall_var: "{{ shmall_fact.stdout }}"


- name: Print the Value of SHMMAX
  shell: "echo $(expr $(getconf _PHYS_PAGES) / 2 \\* $(getconf PAGE_SIZE))"
  register: shmmax_fact


- name: Set Fact for SHMMAX
  set_fact:
    shmmax_var: "{{ shmmax_fact.stdout }}"


- debug: msg={{ shmall_var }}
- debug: msg={{ shmmax_var }}

