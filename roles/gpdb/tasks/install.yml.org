---
# Install Greenplum Database on Red Hat / CentOS / Rocky / Ubuntu / Debian
#   installation: {{ gpdb_base_dir }}/greenplum-db must not exist
#   linkchange: {{ gpdb_base_dir }}/greenplum-db points to another directory

#
- name: Check if any version of Greenplum Database is already installed
  stat: path={{ gpdb_base_dir }}/greenplum-db
  register: gpdb_link_existed
  # register: gpdb_installed

#
- name: Check if the Greenplum Database version is already installed
  stat: path={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }}
  register: gpdb_dir_existed

#
- name: Sanity check for {{ gpdb_base_dir }}/greenplum-db
  fail: msg="{{ gpdb_base_dir }}/greenplum-db is supposed to be a symlink!"
  when: gpdb_link_existed.stat.exists == True and gpdb_link_existed.stat.islnk != True

#
- name: Set name for binary installer file (name includes build number)
  set_fact:
    binary_installer_file: greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }}-{{ gpdb_os_name }}-{{ gpdb_arch_name }}
  when: gpdb_build_version is defined and gpdb_build_version != None

#
- name: Set name for binary installer file (name does not include build number)
  set_fact:
    binary_installer_file: greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }}-{{ gpdb_os_name }}-{{ gpdb_arch_name }}
  when: gpdb_build_version is not defined or ( gpdb_build_version is defined and gpdb_build_version == None )

#
- set_fact:
    gpdb_network_range: "{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] + '/' + hostvars[inventory_hostname]['ansible_eth0']['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"

#
- name: Get the specific ip address for all hosts
  set_fact:
    prod_ip_addr_range: "{{ item }}"
  with_items: "{{ ansible_all_ipv4_addresses }}"
  when: "item | ansible.utils.ipaddr( gpdb_network_range )"

#
- name: Set default values for run mode variables
  set_fact:
    gpdb_install: False
    gpdb_linkchange: False

# Non-existent {{ gpdb_base_dir }}/greenplum-db is a new installation
- name: Identify Greenplum Database Installation
  set_fact:
    gpdb_install: True
  when: gpdb_dir_existed.stat.exists != True and  gpdb_dir_existed.stat.exists != True

# If the link points to a different existing directory, it's a link change
- name: Identify Greenplum Database Linkchange
  set_fact:
    gpdb_linkchange: True
  when: gpdb_link_existed.stat.exists != True

#
- name: Greenplum Database Installation
  debug: msg="New Greenplum Database installation"
  when: gpdb_install == True

#
- name: Greenplum Database Link Change
  debug: msg="Changing link to Greenplum Database version"
  when: gpdb_linkchange == True

#
- name: Greenplum Database - Nothing to do
  debug: msg="Nothing to do (no installation/upgrade required)"
  when: gpdb_install == False and gpdb_linkchange == False

###########################################################
# Basic system setup

#
- name: Add gpadmin group
  group:
    name: gpadmin
    state: present

# Do not create ssh keys since this conflicts somehow with gpssh-exkeys
- name: gpadmin user
  user:
    name: gpadmin
    password: "{{ 'changeme' | password_hash('sha512') }}"
    comment: 'Greenplum Administrator'
    createhome: yes
    shell: /bin/bash
    generate_ssh_key: no
    groups: gpadmin
    append: yes
    state: present
  changed_when: False

#
- name: Fix ownership for {{ gpdb_base_dir }}
  file: path={{ gpdb_base_dir }} state=directory mode=0755 owner=gpadmin group=gpadmin

#
- name: Stop and disable iptables
  service: name=iptables state=stopped enabled=no
  changed_when: False
  when: ( ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' ) and hostvars[inventory_hostname].ansible_distribution_major_version|int <= 6

#
- name: Stop and Disable firewalld
  service: name=firewalld state=stopped enabled=no
  changed_when: False
  when: ( ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' ) and  hostvars[inventory_hostname].ansible_distribution_major_version|int >= 7

#
- name: Stop and disable ufw, ebtables
  service: name={{ item }} state=stopped enabled=no
  changed_when: False
  ignore_errors: true
  with_items:
    - ufw
    - ebtables
    - firewalld
    - snapd
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

#
- name: Disable SELinux
  selinux: state=disabled
  notify:
    - Restart system
    - Waiting for server to come back after reboot

#
- name: Modify /etc/systemd/logingd.conf to Not Remove
  lineinfile:
    dest: /etc/systemd/logind.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^#RemoveIPC=', line: 'RemoveIPC=no', state: present }
  notify:
    - Reload systemd-logind

#
- name: Modify /etc/sysctl.conf
  lineinfile:
    dest: /etc/sysctl.conf
    regexp: "^{{ item.param }}"
    line: "{{ item.param }} = {{ item.value }}"
    state: "{{ item.state }}"
  with_items: "{{ common_gpdb_kernel_parameters }}"
  notify:
    - Reload sysctl

#
- name: Modify /etc/sysctl.conf
  lineinfile:
    dest: /etc/sysctl.conf
    regexp: "^{{ item.param }}"
    line: "{{ item.param }} = {{ item.value }}"
    state: "{{ item.state }}"
  with_items: "{{ rhel7_gpdb_kernel_parameters }}"
  notify:
    - Reload sysctl
  when: ( ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky' ) and hostvars[inventory_hostname].ansible_distribution_major_version|int <= 7

#
- name: Modify /etc/ssh/sshd_config
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin yes', state: present }
  notify:
    - Reload sshd

# Move the security limits in it's own file, Instead of adding them to the main config file
- name: Security limits
  copy: src=security_limits.conf dest=/etc/security/limits.d/95-gpdb.conf
  notify:
    - Restart system
    - Waiting for server to come back after reboot

# Need to add XFS options
# Need to check I/O scheduler

- meta: flush_handlers

#######################################################################################################################################################################################################
# Database installation

#
- name: Create empty variable for data directories
  set_fact: data_dirs=""
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments'] ) and gpdb_install == True

#
- name: Create empty variable for mirror data directories
  set_fact: mirror_data_dirs=""
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments'] ) and ( gpdb_mirror_enable == True and gpdb_install == True )

#
- name: Loop over number for primary segments
  set_fact: data_dirs="{{ data_dirs | replace('^ *', '') }} {{ gpdb.data_dir }}/primary"
  with_sequence: start=1 end={{ gpdb_number_segments }} stride=1
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments'] ) and gpdb_install == True

#
- name: Loop over number for mirror segments
  set_fact: mirror_data_dirs="{{ mirror_data_dirs | replace('^ *', '') }} {{ gpdb.data_dir }}/mirror"
  with_sequence: start=1 end={{ gpdb_number_segments }} stride=1
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments'] ) and ( gpdb_mirror_enable == True and gpdb_install == True )

#
- name: Copy Greenplum Database {{ gpdb_major_version }} {{ gpdb_binary_type }} file
  copy: src={{ binary_installer_file }}.{{ gpdb_binary_type }} dest=/home/gpadmin/{{ binary_installer_file }}.{{ gpdb_binary_type }} mode=0644 owner=gpadmin group=gpadmin

#
- name: Remove old temp installer directory
  file: path=/home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install state=absent
  changed_when: False
  when: gpdb_install == True

#
- name: Create new temp installer directory
  file: path=/home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install state=directory owner=gpadmin group=gpadmin
  changed_when: False
  when: gpdb_install == True

#
- block:
  - name: Unzip Greenplum Database {{ gpdb_major_version }} archive (Ansible < 2.2)
    unarchive: src=/home/gpadmin/{{ binary_installer_file }}.zip dest=/home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install remote_src=yes copy=no owner=gpadmin group=gpadmin
    when: ansible_version.full is version_compare('2.2.0.0', operator='<', strict=False)

  - name: Unzip Greenplum Database {{ gpdb_major_version }} archive (Ansible >= 2.2)
    unarchive: src=/home/gpadmin/{{ binary_installer_file }}.zip dest=/home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install remote_src=yes owner=gpadmin group=gpadmin
    when: ansible_version.full is version_compare('2.2.0.0', operator='>=', strict=False)

  when: gpdb_install == True and (  gpdb_binary_type != 'rpm' and gpdb_binary_type != 'deb' )

# This will only work on the first run
# Note: You hereby accept the license! Please see installer for remaining questions.
- name: Accept license and make unattended installation possible
  lineinfile:
    dest: /home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install/{{ binary_installer_file }}.bin
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
    backrefs: "{{ item.backrefs }}"
  with_items:
    - { regexp: '^more << EOF', line: 'cat << EOF', state: present, backrefs: no }
    - { regexp: '^agreed=', line: 'agreed=1', state: present, backrefs: yes }
    - { regexp: '^pathVerification=', line: 'pathVerification=1', state: present, backrefs: yes }
    - { regexp: '^validMigrateDecision=', line: 'validMigrateDecision=1', state: present, backrefs: yes }
    - { regexp: '^user_specified_installPath=', line: 'user_specified_installPath={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }}', state: present, backrefs: yes }
    - { regexp: '^installPath=', line: 'installPath={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }}', state: present, backrefs: yes }
    - { regexp: '^    agreed=', line: '    agreed=1', state: present, backrefs: yes }
  when: ( inventory_hostname in groups['master'] and gpdb_install == True ) and ( gpdb_binary_type != 'rpm' and gpdb_binary_type != 'deb' )

#
- name: Check if database is running
  stat: path=/tmp/.s.PGSQL.5432
  register: gpdb_running
  when: inventory_hostname in groups['master']

#
- name: Shutdown database
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpstop -a )
  args:
    executable: /bin/bash
  async: 60
  poll: 5
  when: ( inventory_hostname in groups['master'] and gpdb_running.stat.exists == True )

#
- name: Install Greenplum Database Software Binary in {{ gpdb_base_dir }}
  become_user: gpadmin
  command: /home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install/{{ binary_installer_file }}.bin
  async: 120
  poll: 5
  when: ( gpdb_install == True and gpdb_initdb_single == False and seg_serialized_install == False and gpdb_binary_type == 'zip' )

#
- name: Install Greenplum Database Software RPM Package in {{ gpdb_base_dir }} for Red Hat / CentOS / Rocky Linux
  yum:
    name: /home/gpadmin/{{ binary_installer_file }}.{{ gpdb_binary_type }}
    state: present
    disable_gpg_check: yes
  async: 360
  poll: 5
  when: ( gpdb_install == True and seg_serialized_install == False and  gpdb_binary_type == 'rpm' )

#
- name: Install Greenplum Database Software DEB Package in {{ gpdb_base_dir }} for Ubuntu / Debian
  apt:
    deb: /home/gpadmin/{{ binary_installer_file }}.{{ gpdb_binary_type }}
    state: present
  async: 360
  poll: 5
  when: ( gpdb_install == True and seg_serialized_install == False and  gpdb_binary_type == 'deb' )

#
- name: Remove temp installer directory
  file: path=/home/gpadmin/gpdb{{ gpdb_major_version }}-tmp-install state=absent
  changed_when: False
  when: gpdb_install == True

#
- name: Check again if the Greenplum Database version is already installed
  stat: path={{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }}
  register: gpdb_installed_verify

#
- name: Stop if Greenplum Database software is not installed
  fail: msg="Installing Greenplum Database Software is currently failed!"
  when: gpdb_installed_verify.stat.exists != True


# Status: database software is installed
###########################################################
# Database initialization

#
- name: Copy gpinitsystem config file for single node
  command: creates=/home/gpadmin/gpinitsystem_config cp -a {{ gpdb_base_dir }}/greenplum-db/docs/cli_help/gpconfigs/gpinitsystem_singlenode /home/gpadmin/gpinitsystem_config
  when: inventory_hostname in groups['master'] and ( gpdb_install == True and gpdb_initdb_single == True )

#
- name: Copy gpinitsystem config file for multiple nodes
  command: creates=/home/gpadmin/gpinitsystem_config cp -a {{ gpdb_base_dir }}/greenplum-db/docs/cli_help/gpconfigs/gpinitsystem_config /home/gpadmin/gpinitsystem_config
  when: inventory_hostname in groups['master'] and ( gpdb_install == True and gpdb_initdb_single == False )

#
- name: Create hostfile file for single node
  become_user: root
  shell: "rm -f {{ playbook_dir }}/hostfile; sed -n $(( $( grep -n master {{ playbook_dir }}/ansible-hosts | head -1 | cut -d ':' -f 1 ) + 1 ))p {{ playbook_dir }}/ansible-hosts | awk '{print $1}' > {{ playbook_dir }}/hostfile"
  delegate_to: 127.0.0.1
  when: ( inventory_hostname in groups['master'] and gpdb_install == True ) and ( gpdb_initdb_single == True or gpdb_initdb_with_standby == False )

#
- name: Create hostfile file for multiple nodes
  become_user: "{{ local_machine_user }}"        # It was pivotal previously
  shell: "rm -f {{ playbook_dir }}/hostfile; tail -n +$(($( grep -n segments {{ playbook_dir }}/ansible-hosts | cut -d ':' -f 1 ) + 1)) {{ playbook_dir }}/ansible-hosts | awk '{print $1}' >> {{ playbook_dir }}/hostfile"
  delegate_to: 127.0.0.1
  when: ( inventory_hostname in groups['master'] and gpdb_install == True ) and ( gpdb_initdb_single == False or gpdb_initdb_with_standby == True )

#
- name: Create hostfile_all file for all nodes
  become_user: "{{ local_machine_user }}"        # It was pivotal previously
  shell: "rm -f {{ playbook_dir }}/hostfile_all; sed -n $(($(grep -n master {{ playbook_dir }}/ansible-hosts | head -1 | cut -d ':' -f 1) + 1 )),$\\p {{ playbook_dir }}/ansible-hosts | grep -v '^\\[' | sed '/^[[:space:]]*$/d' | awk '{print $1}' >> {{ playbook_dir }}/hostfile_all"
  delegate_to: 127.0.0.1
  when: ( inventory_hostname in groups['master'] and gpdb_install == True )
  # shell: "rm -f {{ playbook_dir }}/hostfile_all; tail -n +$(($(grep -n master {{ playbook_dir }}/ansible-hosts | head -1 | cut -d ':' -f 1) + 1 )),$\\p {{ playbook_dir }}/ansible-hosts | grep -v '\\[' | sed '/^[[:space:]]*$/d' | awk '{print $1}' >> {{ playbook_dir }}/hostfile_all"

#
- name: Copy hostfile files
  copy: src={{ playbook_dir }}/hostfile dest=/home/gpadmin/{{ item }} owner=gpadmin group=gpadmin mode=0644
  with_items:
    - hostfile
    - hostfile_all
  when: ( inventory_hostname in groups['master'] and gpdb_install == True )

#
- name: Fix permissions and ownership for gpinitsystem config file and hostlist file
  file: path=/home/gpadmin/{{ item.path }} owner={{ item.owner }} group={{item.group }} mode={{ item.mode }}
  with_items:
    - { path: 'gpinitsystem_config', owner: 'gpadmin', group: 'gpadmin', mode: '0664' }
    - { path: 'hostfile', owner: 'gpadmin', group: 'gpadmin', mode: '0700' }
  when: ( inventory_hostname in groups['master'] and gpdb_install == True )

#
- name: Fix hostname in hostfile
  replace:
    dest: /home/gpadmin/hostfile
    regexp: '^replace_this_with_hostname_of_your_machine$'
    replace: '{{ ansible_hostname }}'
  when: ( inventory_hostname in groups['master'] and gpdb_install == True )

#
- name: Fix settings in gpinitsystem config file
  lineinfile:
    dest: /home/gpadmin/gpinitsystem_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^MACHINE_LIST_FILE=', line: 'MACHINE_LIST_FILE=/home/gpadmin/hostfile', state: present }
    - { regexp: '^declare -a DATA_DIRECTORY=', line: 'declare -a DATA_DIRECTORY=({{ data_dirs }} )', state: present }
    - { regexp: '^MASTER_HOSTNAME=', line: 'MASTER_HOSTNAME={{ ansible_hostname }}', state: present }
    - { regexp: '^MASTER_DIRECTORY=', line: 'MASTER_DIRECTORY={{ gpdb.data_dir }}/master', state: present }
    - { regexp: '^#?DATABASE_NAME=', line: 'DATABASE_NAME=gpadmin', state: present }
    - { regexp: '^COORDINATOR_HOSTNAME=', line: "COODINATOR_HOSTNAME={{ hostvars[groups['master'][0]]['ansible_hostname'] }}", state: present }
    - { regexp: '^COORDINATOR_DIRECTORY=', line: 'MASTER_DIRECTORY={{ gpdb.data_dir }}/master', state: present }
    - { regexp: '^SEG_PREFIX=', line: 'SEG_PREFIX=gpseg', state: present }
  when: ( inventory_hostname in groups['master'] and gpdb_install == True )

#
- name: Change permission of Greenplum Database directory
  become: true
  become_user: root
  file:
    path: "{{ item.dir }}"
    state: "{{ item.state }}"
    mode: "{{ item.perm }}"
    owner: gpadmin
    group: gpadmin
    recurse: "{{ item.recurse }}"
  with_items:
    - { "state": "directory", "perm": "0755", "recurse": "yes", "dir": "{{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }}" }
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']

#
- name: Change permission of Greenplum Database link since above task does not work for link
  become: true
  become_user: root
  shell: "chown -R gpadmin:gpadmin {{ gpdb_base_dir }}/greenplum-db"
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']

# Status: Config files ready, initialize database if required.
# Check if the 'known_hosts' file exists - this is taken as sign that the ssh key exchange happened before. that is not very reliable
- name: Check if the ssh login for gpadmin is already setup
  stat: path=/home/gpadmin/.ssh/known_hosts
  register: ssh_initialized_gpadmin

#
- name: Check if the ssh login for root is already setup
  stat: path=/root/.ssh/known_hosts
  register: ssh_initialized_root

#
- name: Check if the database is already initialized
  stat: path={{ gpdb.data_dir }}
  register: gpdb_initialized

#
- name: Create {{ gpdb.data_dir }} directories
  file: path={{ item.path }} state=directory owner=gpadmin group=gpadmin mode=0770
  with_items:
    - { path: '{{ gpdb.data_dir }}' }
  when: gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True

#
- name: Create {{ gpdb.data_dir }}/master directories for master and standby
  file: path={{ item.path }} state=directory owner=gpadmin group=gpadmin mode=0770
  with_items:
    - { path: '{{ gpdb.data_dir }}/master' }
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and ( gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True )

#
- name: Create {{ gpdb.data_dir }}/primary and mirror directories for only master
  file: path={{ item.path }} state=directory owner=gpadmin group=gpadmin mode=0770
  with_items:
    - { path: '{{ gpdb.data_dir }}/primary' }
    - { path: '{{ gpdb.data_dir }}/mirror' }
  when: ( inventory_hostname in groups['master'] and gpdb_initdb_single == True ) and ( gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True )

#
- name: Create {{ gpdb.data_dir }} segment directories
  file: path={{ gpdb.data_dir }}/primary state=directory owner=gpadmin group=gpadmin mode=0770
  when: ( inventory_hostname in groups['segments'] and gpdb_initdb_single == False ) and ( gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True )

#
- name: Create {{ gpdb.data_dir }} segment directories
  file: path={{ gpdb.data_dir }}/mirror state=directory owner=gpadmin group=gpadmin mode=0770
  when: ( inventory_hostname in groups['segments'] and gpdb_initdb_single == False ) and ( gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True )

#
- name: Install greeplum binary into segment nodes by running gpseginstall
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpseginstall -f /home/gpadmin/hostfile )
  async: 120
  poll: 5
  register: gpseginstall_installed
  # changed_when: False
  when: inventory_hostname in groups['master'] and ( gpdb_initialized.stat.exists != True and gpdb_initdb_single == False and seg_serialized_install == True )

#
- name: Initialize Greenplum Database Cluster
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpinitsystem -a -c /home/gpadmin/gpinitsystem_config -h /home/gpadmin/hostfile {{ gpdb_spread_mirrors }} )
  args:
    executable: /bin/bash
  async: 600
  poll: 5
  register: init_db
  when: inventory_hostname in groups['master'] and  gpdb_initdb_with_standby == False
  failed_when: init_db.rc > 1

#
- name: Initialize Greenplum Database Cluster with Standby Master
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpinitsystem -c /home/gpadmin/gpinitsystem_config -a {{ gpdb_spread_mirrors }} -h /home/gpadmin/hostfile -s {{ smdw_hostname }} )
  args:
    executable: /bin/bash
  async: 600
  poll: 5
  register: init_db
  when: inventory_hostname in groups['master'] and gpdb_initdb_with_standby == True
  failed_when: init_db.rc > 1

# the greenplum_path.sh from the new installation does not have $MASTER_DATA_DIRECTORY
- name: Add MASTER_DATA_DIRECTORY to greenplum_path.sh
  become_user: gpadmin
  lineinfile:
    dest: "{{ gpdb_base_dir }}/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }}/greenplum_path.sh"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^export MASTER_DATA_DIRECTORY=', line: 'export MASTER_DATA_DIRECTORY={{ gpdb.data_dir }}/master/gpseg-1', state: present }
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and ( gpdb_install == True or gpdb_linkchange == True )

#
- name: Restart Greenplum Database after initialization
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpstop -ra )
  async: 60
  poll: 5
  when: inventory_hostname in groups['master'] and ( gpdb_install == True or gpdb_linkchange == True )

#
- name: Check if database is running
  stat: path=/tmp/.s.PGSQL.5432
  register: gpdb_running_nothing
  when: inventory_hostname in groups['master'] and ( gpdb_install == True and gpdb_linkchange == True )

#
- name: Start database
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpstart -a )
  async: 60
  poll: 5
  when: inventory_hostname in groups['master'] and ( gpdb_install == True and gpdb_linkchange == True and gpdb_running_nothing.stat.exists != True )

#
- name: Create the cgconfig.conf for all nodes
  become: true
  template: src=cgconfig.conf.j2 dest=/etc/cgconfig.conf owner=root group=root mode=644 force=yes
  register: cgconfig_created

#
- name: Copy systemd configuration of cgconfig into /etc/systemd/system
  become: true
  template: src=cgconfig.systemd.j2 dest=/etc/systemd/system/cgconfig.service owner=root group=root mode=644 force=yes
  register: systemd_cgconfig_created
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

#
- name: Enable and Restart cgconfig for applying config
  become: true
  systemd:
    name: cgconfig
    enabled: yes
    state: restarted
    daemon_reload: true
  register: cgconfig_restarted

#
- name: Enabling Resource Groups by gpconfig
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpconfig -c gp_resource_manager -v "group" )
  args:
    executable: /bin/bash
  register: resource_group_enabled
  when: inventory_hostname in groups['master']

#
- name: Check if SSL Directory is already existed
  stat: path={{ gpdb_ssl_dir }}
  register: check_dir_sslkey_installed
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and enable_ssl == True

#
- name: Create SSL directory
  file: path={{ gpdb_ssl_dir }} state=directory owner=gpadmin group=gpadmin
  changed_when: False
  register: dir_sslkey_installed
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and ( check_dir_sslkey_installed.stat.exists != True and enable_ssl == True )

#
- name: Create SSL key to connect intoo Greenplum Database
  shell: ( openssl req -newkey rsa:2048 -x509 -keyout {{ gpdb_ssl_dir }}/cert.pem -new -text -out {{ gpdb_ssl_dir }}/server.req -days {{ gpdb_ssl_days }} -nodes -subj "/C={{ gpdb_ssl_country }}/ST={{ gpdb_ssl_state }}/L={{ gpdb_ssl_location }}/O={{ gpdb_ssl_organization }}/CN={{ gpdb_ssl_common_name }}/emailAddress={{ gpdb_ssl_email }}" )
  args:
    executable: /bin/bash
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and enable_ssl == True

#
- name: xxxxx
  shell: ( openssl rsa -in {{ gpdb_ssl_dir }}/cert.pem -out {{ gpdb_ssl_dir }}/server.key )
  args:
    executable: /bin/bash
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and enable_ssl == True


#
- name: Turn the certificate into a self-signed certificate so that the server will look for them.
  shell: ( openssl req -x509 -in {{ gpdb_ssl_dir }}/server.req -key {{ gpdb_ssl_dir }}/server.key -new -text -out {{ gpdb_ssl_dir }}/server.crt -days {{ gpdb_ssl_days }} -nodes -subj "/C={{ gpdb_ssl_country }}/ST={{ gpdb_ssl_state }}/L={{ gpdb_ssl_location }}/O={{ gpdb_ssl_organization }}/CN={{ gpdb_ssl_common_name }}/emailAddress={{ gpdb_ssl_email }}" )
  args:
    executable: /bin/bash
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and enable_ssl == True

#
- name: Change permission of ssl key files to login Greenplum Database via SSL
  file:
    path: "{{ gpdb_ssl_dir }}/{{ item }}"
    state: file
    owner: gpadmin
    group: gpadmin
    mode: "0600"
  with_items:
    - "server.key"
    - "server.crt"
    - "server.req"
    - "cert.pem"
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] )

#
- name: Add ssl configuration file to authenticate ssl user into Greenplum Database
  lineinfile:
    dest: "{{ gpdb.master_data_dir }}/{{ item.file }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { file: "pg_hba.conf",     line: "hostssl  all         all           0.0.0.0/0         md5",           state: present }
    - { file: "postgresql.conf", line: "ssl = on",           state: present }
  register: ssl_postgres_config
  when:
    - ( inventory_hostname in groups['master'] and enable_ssl == True and gpdb_initdb_with_standby == True ) or ( inventory_hostname in groups['standby'] and gpdb_initdb_with_standby == True and enable_ssl == True )

#
- name: Apply new changes for Resource Groups
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpstop -ra )
  args:
    executable: /bin/bash
  register: rs_applied
  when: inventory_hostname in groups['master']

#
- name: Add the path of greenplum variable file into .bashrc
  become: true
  become_user: gpadmin
  lineinfile:
    dest: /home/gpadmin/.bashrc
    line: "source /usr/local/greenplum-db/greenplum_path.sh"
    state: present

#
- name: Verify that Greenplum Database is up and running
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -c "SELECT VERSION()" )
  args:
    executable: /bin/bash
  register: select_version
  when: inventory_hostname in groups['master']
  failed_when: "'(Greenplum Database ' not in select_version.stdout"

#
- name: Change gpadmin password to check remote login via SSL
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -c "alter user gpadmin with password 'changeme'" )
  args:
    executable: /bin/bash
  register: gpadmin_password_changed
  when: inventory_hostname in groups['master']
  failed_when: "'(Greenplum Database ' not in select_version.stdout"

#
- name: Greenplum Database Installation
  debug: msg="Greenplum Database {{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }} installed"
  when: gpdb_install == True

#
- name: Greenplum Database Version switched
  debug: msg="Greenplum Database {{ gpdb_major_version }}.{{ gpdb_minor_version }}{{ gpdb_build_version }} is active"
  when: gpdb_linkchange == True

# Status: Greenplum Database up and running
