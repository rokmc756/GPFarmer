# Status: database software is installed
###########################################################
# Database initialization
#
- name: Create empty variable for data directories
  set_fact: data_dirs=""
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments'] ) and gpdb_install == True


- name: Create empty variable for mirror data directories
  set_fact: mirror_data_dirs=""
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments'] ) and ( gpdb.mirror_enable == True and gpdb_install == True )

#
- name: Loop over number for primary segments
  set_fact: data_dirs="{{ data_dirs | replace('^ *', '') }} {{ gpdb.data_dir }}/primary"
  with_sequence: start=1 end={{ gpdb.number_segments }} stride=1
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments'] ) and gpdb_install == True

#
- name: Loop over number for mirror segments
  set_fact: mirror_data_dirs="{{ mirror_data_dirs | replace('^ *', '') }} {{ gpdb.data_dir }}/mirror"
  with_sequence: start=1 end={{ gpdb.number_segments }} stride=1
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments'] ) and ( gpdb.mirror_enable == True and gpdb_install == True )

#
- name: Copy gpinitsystem config file for single node
  command: creates=/home/gpadmin/gpinitsystem_config cp -a {{ gpdb.base_dir }}/greenplum-db/docs/cli_help/gpconfigs/gpinitsystem_singlenode /home/gpadmin/gpinitsystem_config
  when: inventory_hostname in groups['master'] and ( gpdb_install == True and gpdb.initdb_single == True )

#
- name: Copy gpinitsystem config file for multiple nodes
  command: creates=/home/gpadmin/gpinitsystem_config cp -a {{ gpdb.base_dir }}/greenplum-db/docs/cli_help/gpconfigs/gpinitsystem_config /home/gpadmin/gpinitsystem_config
  when: inventory_hostname in groups['master'] and ( gpdb_install == True and gpdb.initdb_with_standby == True )

#
- name: Create hostfile file for master node
  lineinfile:
    path: "/home/gpadmin/hostfile"
    line: "{{ hostvars[item]['ansible_hostname'] }}"
    state: present
    owner: gpadmin
    group: gpadmin
    mode: '0644'
    create: yes
  register: hostfile_created
  with_items: "{{ groups['master'] }}"
  when: ( inventory_hostname in groups['master'] and gpdb_install == True ) and ( gpdb.initdb_single == True and gpdb.initdb_with_standby == False )

#
- name: Create hostfile_all file for all nodes
  lineinfile:
    path: "/home/gpadmin/hostfile_all"
    line: "{{ hostvars[item]['ansible_hostname'] }}"
    state: present
    owner: gpadmin
    group: gpadmin
    mode: '0644'
    create: yes
  register: hostfile_all_created
  with_items:
    - "{{ groups['master'] }}"
    - "{{ groups['standby'] }}"
    - "{{ groups['segments'] }}"
  when: ( inventory_hostname in groups['master'] and gpdb_install == True ) and ( gpdb.initdb_single == False and gpdb.initdb_with_standby == True )

#
- name: Create hostfile file for segment nodes
  lineinfile:
    path: "/home/gpadmin/hostfile"
    line: "{{ hostvars[item]['ansible_hostname'] }}"
    state: present
    create: yes
  register: hostfile_created
  with_items: "{{ groups['segments'] }}"
  when: ( inventory_hostname in groups['master'] and gpdb_install == True ) and ( gpdb.initdb_single == False and gpdb.initdb_with_standby == True )

#
- name: Fix permissions and ownership for gpinitsystem config file and hostlist file
  file: path=/home/gpadmin/{{ item.path }} owner={{ item.owner }} group={{item.group }} mode={{ item.mode }}
  with_items:
    - { path: 'gpinitsystem_config', owner: 'gpadmin', group: 'gpadmin', mode: '0664' }
    - { path: 'hostfile', owner: 'gpadmin', group: 'gpadmin', mode: '0700' }
    - { path: 'hostfile_all', owner: 'gpadmin', group: 'gpadmin', mode: '0700' }
  when: ( inventory_hostname in groups['master'] and gpdb_install == True )

#
- name: Fix hostname in hostfile
  replace:
    dest: /home/gpadmin/hostfile
    regexp: '^replace_this_with_hostname_of_your_machine$'
    replace: '{{ ansible_hostname }}'
  when: ( inventory_hostname in groups['master'] and gpdb_install == True )

#
- name: Fix settings in gpinitsystem config file
  lineinfile:
    dest: /home/gpadmin/gpinitsystem_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^MACHINE_LIST_FILE=', line: 'MACHINE_LIST_FILE=/home/gpadmin/hostfile', state: present }
    - { regexp: '^declare -a DATA_DIRECTORY=', line: 'declare -a DATA_DIRECTORY=({{ data_dirs }} )', state: present }
    - { regexp: '^MASTER_HOSTNAME=', line: 'MASTER_HOSTNAME={{ ansible_hostname }}', state: present }
    - { regexp: '^MASTER_DIRECTORY=', line: 'MASTER_DIRECTORY={{ gpdb.data_dir }}/master', state: present }
    - { regexp: '^#?DATABASE_NAME=', line: 'DATABASE_NAME=gpadmin', state: present }
    - { regexp: '^COORDINATOR_HOSTNAME=', line: "COODINATOR_HOSTNAME={{ hostvars[groups['master'][0]]['ansible_hostname'] }}", state: present }
    - { regexp: '^COORDINATOR_DIRECTORY=', line: 'MASTER_DIRECTORY={{ gpdb.data_dir }}/master', state: present }
    - { regexp: '^SEG_PREFIX=', line: 'SEG_PREFIX=gpseg', state: present }
    - { regexp: '^#declare -a MIRROR_DATA_DIRECTORY=', line: 'declare -a MIRROR_DATA_DIRECTORY=({{ mirror_data_dirs }} )', state: present }
    - { regexp: '^MIRROR_PORT_BASE=', line: 'MIRROR_PORT_BASE=7000', state: present }
  when: ( inventory_hostname in groups['master'] and gpdb_install == True )

#
- name: Change permission of Greenplum Database directory
  file:
    path: "{{ item.dir }}"
    state: "{{ item.state }}"
    mode: "{{ item.perm }}"
    owner: gpadmin
    group: gpadmin
    recurse: "{{ item.recurse }}"
  with_items:
    - { "state": "directory", "perm": "0755", "recurse": "yes", "dir": "{{ gpdb.base_dir }}/{{ install_path }}" }
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']

#
- name: Change permission of Greenplum Database link since above task does not work for link
  shell: "chown -R gpadmin:gpadmin {{ gpdb.base_dir }}/greenplum-db"
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] or inventory_hostname in groups['segments']

# Status: Config files ready, initialize database if required.
# Check if the 'known_hosts' file exists - this is taken as sign that the ssh key exchange happened before. that is not very reliable
- name: Check if the ssh login for gpadmin is already setup
  stat: path=/home/gpadmin/.ssh/known_hosts
  register: ssh_initialized_gpadmin

#
- name: Check if the ssh login for root is already setup
  stat: path=/root/.ssh/known_hosts
  register: ssh_initialized_root

#
- name: Check if the database is already initialized
  stat: path={{ gpdb.data_dir }}
  register: gpdb_initialized

#
- name: Create {{ gpdb.data_dir }} directories
  file: path={{ item.path }} state=directory owner=gpadmin group=gpadmin mode=0770
  with_items:
    - { path: '{{ gpdb.data_dir }}' }
  when: gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True

#
- name: Create {{ gpdb.data_dir }}/master directories for master and standby
  file: path={{ item.path }} state=directory owner=gpadmin group=gpadmin mode=0770
  with_items:
    - { path: '{{ gpdb.data_dir }}/master' }
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and ( gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True )

#
- name: Create {{ gpdb.data_dir }}/primary and mirror directories for only master
  file: path={{ item.path }} state=directory owner=gpadmin group=gpadmin mode=0770
  with_items:
    - { path: '{{ gpdb.data_dir }}/primary' }
    - { path: '{{ gpdb.data_dir }}/mirror' }
  when: ( inventory_hostname in groups['master'] and gpdb.initdb_single == True ) and ( gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True )

#
- name: Create {{ gpdb.data_dir }}/primary and mirror directories for only segments
  file: path={{ item.path }} state=directory owner=gpadmin group=gpadmin mode=0770
  with_items:
    - { path: '{{ gpdb.data_dir }}/primary' }
    - { path: '{{ gpdb.data_dir }}/mirror' }
  when: ( inventory_hostname in groups['segments'] and gpdb.initdb_with_standby == true ) and ( gpdb_initialized.stat.exists != True or gpdb_initialized.stat.exists == True )

#
- name: Install greeplum binary into segment nodes by running gpseginstall
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpseginstall -f /home/gpadmin/hostfile )
  async: 120
  poll: 5
  register: gpseginstall_installed
  # changed_when: False
  when: inventory_hostname in groups['master'] and ( gpdb_initialized.stat.exists != True and gpdb.initdb_single == False and gpdb.seg_serialized_install == True )

# pip2 install pip
# python -m pip install --upgrade pip
# python -m pip install psutil

#
- name: Initialize Greenplum Database Cluster
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpinitsystem -a -c /home/gpadmin/gpinitsystem_config -h /home/gpadmin/hostfile {{ gpdb.spread_mirrors }} )
  args:
    executable: /bin/bash
  async: 600
  poll: 5
  register: init_db
  when: inventory_hostname in groups['master'] and  gpdb.initdb_with_standby == False
  failed_when: init_db.rc > 1

#
- name: Initialize Greenplum Database Cluster with Standby Master
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpinitsystem -c /home/gpadmin/gpinitsystem_config -a {{ gpdb.spread_mirrors }} -h /home/gpadmin/hostfile -s {{ hostvars[groups['standby'][0]]['ansible_hostname'] }} )
  args:
    executable: /bin/bash
  async: 600
  poll: 5
  register: init_db
  when: inventory_hostname in groups['master'] and gpdb.initdb_with_standby == True
  failed_when: init_db.rc > 1

# the greenplum_path.sh from the new installation does not have $MASTER_DATA_DIRECTORY
- name: Add MASTER_DATA_DIRECTORY to greenplum_path.sh
  become_user: gpadmin
  lineinfile:
    dest: "{{ gpdb.base_dir }}/{{ install_path }}/greenplum_path.sh"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^export MASTER_DATA_DIRECTORY=', line: 'export MASTER_DATA_DIRECTORY={{ gpdb.master_data_dir }}', state: present }
  when: ( inventory_hostname in groups['master'] or inventory_hostname in groups['standby'] ) and ( gpdb_install == True or gpdb_linkchange == True )

#
- name: Restart Greenplum Database after initialization
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpstop -ra )
  async: 60
  poll: 5
  when: inventory_hostname in groups['master'] and ( gpdb_install == True or gpdb_linkchange == True )

#
- name: Check if database is running
  stat: path=/tmp/.s.PGSQL.5432
  register: gpdb_running_nothing
  when: inventory_hostname in groups['master'] and ( gpdb_install == True and gpdb_linkchange == True )

#
- name: Start database
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpstart -a )
  async: 60
  poll: 5
  when: inventory_hostname in groups['master'] and ( gpdb_install == True and gpdb_linkchange == True and gpdb_running_nothing.stat.exists != True )
