---
# Uninstall Greenplum Streaming Server on GPDB Master and Kafka Broker
# Remove configuraiton and sample data, table, database

- set_fact:
    gppkg_remove_cmd: "gppkg -a -f remove"
    check_gpss_installed: "gppkg query | grep gpss | awk '{print $1}'"
    package_name: gpss
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( gpss.gpdb_version|regex_replace('[^0-9]','')|int >= 7 and gpss.os_version|regex_replace('[^0-9]','')|int >= 8 )

#
- set_fact:
    gppkg_remove_cmd: "gppkg -r"
    check_gpss_installed: "gppkg -q --all | grep gpss | cut -d . -f 1 | sed 's/[0-9]$//g'"
    package_name: gpss-{{ gpss.gpdb_version }}-{{ gpss.major_version }}.{{ gpss.minor_version }}-{{ gpss.os_version }}-{{ gpss.arch_type }}.gppkg
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( gpss.gpdb_version|regex_replace('[^0-9]','')|int <= 6 and gpss.os_version|regex_replace('[^0-9]','')|int <= 8 )

#
- set_fact:
    gppkg_remove_cmd: "gppkg -a -f remove"
    check_gpss_installed: "gppkg query | grep gpss | awk '{print $1}'"
    package_name: gpss
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ( gpss.gpdb_version|regex_replace('[^0-9]','')|int >= 7 and gpss.os_version|regex_replace('[^0-9]','')|int >= 8 )

#
- set_fact:
    gppkg_remove_cmd: "gppkg -r"
    check_gpss_installed: "gppkg -q --all | grep gpss | cut -d . -f 1 | sed 's/[0-9]$//g'"
    package_name: gpss-{{ gpss.gpdb_version }}-{{ gpss.major_version }}.{{ gpss.minor_version }}-{{ gpss.os_version }}-{{ gpss.arch_type }}.gppkg
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ( gpss.gpdb_version|regex_replace('[^0-9]','')|int <= 6 and gpss.os_version|regex_replace('[^0-9]','')|int <= 8 )

#
- name: Check if the GPDB software is already installed
  stat: path={{ gpdb.base_dir }}/greenplum-db
  register: gpdb_installed
  when: inventory_hostname in groups['master']

#
- name: Stop if GPDB software is not installed
  fail: msg="Greenplum Database software is not installed!"
  when: inventory_hostname in groups['master'] and  gpdb_installed.stat.exists != True

#
- name: Verify if GPSS gppkg is installed
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ check_gpss_installed }} )
  ignore_errors: true
  register: gpss_installed
  changed_when: False
  when: inventory_hostname in groups['master']

#
- name: Print the result if GPSS is not installed
  debug:
    msg: "{{ gpss_installed.stdout }}"
  when: inventory_hostname in groups['master']

#
- name: Stop if GPSS gppkg package is not installed
  fail: msg="GPSS gppkg package is not installed!"
  when: ( inventory_hostname in groups['master'] and 'gpss' not in gpss_installed.stdout )

#
- name: Verify that database is up and running
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -c "SELECT VERSION()" )
  register: select_version
  failed_when: "'(Greenplum Database ' not in select_version.stdout"
  when: inventory_hostname in groups['master']

#
- name: Stop GPSS job by gpsscli
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpsscli stop {{ item.name }} --gpss-port {{ item.gpss_port }} )
  register: gpss_job_stopped
  ignore_errors: yes
  with_items: "{{ gpss.jobs }}"
  when: inventory_hostname in groups['master']

#
- name: Remove GPSS job by gpsscli
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpsscli remove {{ item.name }} --gpss-port {{ item.gpss_port }} )
  register: gpss_job_removed
  ignore_errors: yes
  with_items: "{{ gpss.jobs }}"
  when: inventory_hostname in groups['master']

#
- name: Kill GPSS daemon
  become_user: gpadmin
  shell: kill -9 $(pidof gpss)
  register: gpss_daemon_killed
  ignore_errors: yes
  when: inventory_hostname in groups['master']

#
- name: Verify that database for GPSS extention is installed
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -tAc "SELECT 100 FROM pg_database WHERE datname='{{ gpss.database_name }}'" )
  register: gpss_database_installed
  when: inventory_hostname in groups['master']

#
- name: Drop extension for GPSS
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ gpss.database_name }} -tAc "drop extension gpss" )
  register: gpss_extension_dropped
  ignore_errors: yes
  when: inventory_hostname in groups['master'] and "'100' in gpss_database_installed.stdout"

#
- name: Drop database for GPSS
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && dropdb {{ gpss.database_name }} )
  register: gpss_database_dropped
  ignore_errors: yes
  when: inventory_hostname in groups['master'] and "'100' in gpss_database_installed.stdout"

#
#- name: Verify if GPSS gppkg is installed
#  become_user: gpadmin
#  command: 'rpm -q gpss --dbpath /usr/local/greenplum-db/share/packages/database'
##  register: select_gpss_version
#  ignore_errors: yes
#  when:  inventory_hostname in groups['master']
#  # failed_when:  select_gpss_version.rc != 1

#
#- name: Verify if GPSS gppkg is installed
#  become_user: gpadmin
#  command: 'rpm -q gpss --dbpath /usr/local/greenplum-db/share/packages/database'
#  ignore_errors: true
#  register: select_gpss_version
#  changed_when: False
#  when: inventory_hostname in groups['master']
#  # command: '/usr/bin/rpm -qa custom-rpm --queryformat %{VERSION}'

#
#- name: Stop if GPSS gppkg package is not installed
#  fail: msg="GPSS gppkg package is not installed!"
#  when:
#    - inventory_hostname in groups['master']
#    - "'package gpss is not installed' in select_gpss_version.stdout"

#
- name: Uninstall GPSS gppkg package
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ gppkg_remove_cmd }} {{ package_name }} )
  when: ( inventory_hostname in groups['master'] and 'gpss' in gpss_installed.stdout )

#
#- name: "Check if GPSS RPM package is installed"
#  package_facts:
#    manager: "auto"
#  when: inventory_hostname in groups['kafka_brokers']  # At Kafka Broker
#
#
#- name: Stop if GPSS rpm package is not installed
#  fail: msg="GPSS rpm package is not installed!"
#  when:
#    - inventory_hostname in groups['kafka_brokers']  # At Kafka Broker
#    - "'gpss' not in ansible_facts.packages"
#

- name: Check file list of GPSS tarball
  stat:
    path: "/usr/local/greenplum-db/{{ tarball_loop }}"
  loop: "{{ gpss.file_vars }}"
  loop_control:
    loop_var: tarball_loop
  register: tarball_stat_var
  when: inventory_hostname in groups['master']

#
- name: Delete a file of GPSS tarball if not exists
  file:
    owner: gpadmin
    group: gpadmin
    path: "{{ item.tarball_loop }}"
    state: "{{ 'absent' if item.stat.exists else 'absent'}}"
  loop: "{{ tarball_stat_var.results }}"
  when: inventory_hostname in groups['master']

#
- name: Delete GPSS working base directory
  become: yes
  file:
    owner: gpadmin
    group: gpadmin
    path: "{{ gpss.base_dir }}"
    state: absent
  when: inventory_hostname in groups['master']

#
- name: Delete gpkafka duplicated in greenplum base directory
  file:
    owner: gpadmin
    group: gpadmin
    path: "{{ item }}"
    state: absent
  with_items:
    - "/usr/local/greenplum-db/bin/gpkafka"
#    - "/usr/local/greenplum-db/bin/gpss"
#    - "/usr/local/greenplum-db/bin/gpsscli"
