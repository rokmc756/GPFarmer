---

# Install Greenplum Streaming Server on both GPDB Master and Kafka Broker
# Configure data loading with sample data between them
#
- name: Check if the GPDB software is already installed
  stat: path={{ gpdb_base_dir }}/greenplum-db
  register: gpdb_installed
  when: inventory_hostname in groups['master']

#
- name: Stop if GPDB software is not installed
  fail: msg="Greenplum Database software is not installed!"
  when:
    - inventory_hostname in groups['master']
    - gpdb_installed.stat.exists != True

#
- name: Verify that database is up and running
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -c "SELECT VERSION()" )
  register: select_version
  when: inventory_hostname in groups['master']
  failed_when: "'(Greenplum Database ' not in select_version.stdout"

#
- name: yum install daemonize
  become: yes
  yum:
    name: daemonize
    state: latest
  when: inventory_hostname in groups['master']

#
- name: Copy GPSS tarball file
  become_user: gpadmin
  copy: src=gpss-{{ gpss_gpdb_version }}-{{ gpss_major_version }}.{{ gpss_minor_version }}{{ gpss_patch_version }}-{{ gpss_rhel_version_kafka }}-x86_64.tar.gz dest={{ gpadmin_home_dir }} mode=0644 owner=gpadmin group=gpadmin
  when:  inventory_hostname in groups['master'] and install_gpss_tar

#
- name: Untar GPSS tarball archive
  become_user: gpadmin
  unarchive: src={{ gpadmin_home_dir }}/gpss-{{ gpss_gpdb_version }}-{{ gpss_major_version }}.{{ gpss_minor_version }}{{ gpss_patch_version }}-{{ gpss_rhel_version_kafka }}-x86_64.tar.gz dest={{ gpadmin_home_dir }} copy=no owner=gpadmin group=gpadmin
  when: inventory_hostname in groups['master'] and install_gpss_tar

#
- name: Install GPSS tarball in {{ gpdb_base_dir }}
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && cd {{ gpadmin_home_dir }}/gpss-{{ gpss_gpdb_version }}-{{ gpss_major_version }}.{{ gpss_minor_version }}{{ gpss_patch_version }}-{{ gpss_rhel_version_kafka }}-x86_64/ ; ./install_gpdb_component )
  async: 120
  poll: 5
  when: inventory_hostname in groups['master'] and install_gpss_tar

#
- name: Verify if GPSS gppkg is installed
  become_user: gpadmin
  command: 'rpm -q gpss --dbpath /usr/local/greenplum-db/share/packages/database'
  register: select_gpss_version
  when:
    - inventory_hostname in groups['master']
  failed_when:
    - select_gpss_version.rc != 1
#  #ignore_warnings: True
#  ## command: '/usr/bin/rpm -qa custom-rpm --queryformat %{VERSION}'

#
- name: Stop if GPSS gppkg package is installed
  fail: msg="GPSS gppkg package is alredy installed!"
  when:
    - inventory_hostname in groups['master']
    - "'package gpss is not installed' not in select_gpss_version.stdout"

#
- name: Copy GPSS gppkg file
  become_user: gpadmin
  copy: src=gpss-{{ gpss_gpdb_version }}-{{ gpss_major_version }}.{{ gpss_minor_version }}{{ gpss_patch_version }}-{{ gpss_rhel_version_gpdb }}-x86_64.gppkg dest={{ gpadmin_home_dir }} mode=0644 owner=gpadmin group=gpadmin
  when:
    - inventory_hostname in groups['master']  # At GPDB Master

#
- name: Install GPSS gppkg package
  become_user: gpadmin
  shell: ( source {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gppkg -i {{ gpadmin_home_dir }}/gpss-{{ gpss_gpdb_version }}-{{ gpss_major_version }}.{{ gpss_minor_version }}{{ gpss_patch_version }}-{{ gpss_rhel_version_gpdb }}-x86_64.gppkg )
  when:
    - inventory_hostname in groups['master']  # At GPDB Master

#
- name: Verify that database for GPSS extention is installed
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -tAc "SELECT 100 FROM pg_database WHERE datname='{{ gpss_database_name }}'" )
  register: gpss_database_installed
  when: inventory_hostname in groups['master']

#
- name: Create database for GPSS
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && createdb {{ gpss_database_name }} )
  register: gpss_database_created
  when:
    - inventory_hostname in groups['master']
    - "'100' not in gpss_database_installed.stdout"

#
- name: Create extension for GPSS
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ gpss_database_name }} -tAc "CREATE extension gpss" )
  register: gpss_extension_installed
  when:
    - inventory_hostname in groups['master']
    - "'100' not in gpss_database_installed.stdout"


- name: Chown gpamdin for GPSS install directory
  become: yes
  file:
    dest: "{{ gpdb_base_dir }}/gpss"
    owner: gpadmin
    group: gpadmin
    mode: u=rwX,g=rX,o=rX
    state: directory
    recurse: yes
  when: inventory_hostname in groups['master']  # At Kafka Broker

#
- name: Creates working base directory for kafka and gpss
  file:
    path: "{{ items }}"
    state: directory
    owner: gpadmin
    group: gpadmin
    mode: 0775
  with_items:
    - "{{ gpss_base_dir }}"
    - "{{ gpss_log_dir }}"
  when: inventory_hostname in groups['master']

- name: Copy create table query file and gpss config file and json loadcfg yml file
  template: src=gpss/{{ item }} dest={{ gpss_base_dir }}/{{ item }} owner=gpadmin group=gpadmin mode=644 force=yes
  register: create_table_query_copied
  with_items:
    - "create_table.sql"
    - "gpss_config.json"
    - "jsonload_cfg.yaml"
  when: inventory_hostname in groups['master']

#
- name: Create table
  become: yes
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -d testdb -f {{ gpss_base_dir }}/create_table.sql )
  register: gpss_table_created
  when: inventory_hostname in groups['master']

#
- debug: msg={{ gpss_table_created }}
  when: inventory_hostname in groups['master'] and print_debug

#
- name: Start GPSS daemon
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && daemonize $GPHOME/bin/gpss {{ gpss_base_dir }}/gpss_config.json --verbose --log-dir {{ gpss_log_dir }} )
  register: gpss_daemon_started
  when: inventory_hostname in groups['master']

#
- debug: msg={{ gpss_daemon_started }}
  when: inventory_hostname in groups['master'] and print_debug

#
- name: Sumit Job
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpsscli submit --verbose --name {{ gpss_job_name }} --gpss-port {{ gpss_port }} {{ gpss_base_dir }}/jsonload_cfg.yaml )
  register: gpss_job_submitted
  when: inventory_hostname in groups['master']

#
- debug: msg={{ gpss_job_submitted }}
  when: inventory_hostname in groups['master'] and print_debug

#
- name: List all jobs
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpsscli list --verbose --all --gpss-port {{ gpss_port }} )
  register: gpss_all_jobs_listed
  when: inventory_hostname in groups['master']

#
- debug: msg={{ gpss_all_jobs_listed }}
  when: inventory_hostname in groups['master'] and print_debug

#
- name: Start GPSS job
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpsscli start {{ gpss_job_name }} --verbose --gpss-port {{ gpss_port }} )
  register: gpss_job_started
  when: inventory_hostname in groups['master']

#
- debug: msg={{ gpss_job_started }}
  when: inventory_hostname in groups['master'] and print_debug

#
- name: Print new contents
  become: yes
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -d testdb -c "SELECT * FROM public.json_from_kafka;" )
  register: gpss_new_contents_printed
  when: inventory_hostname in groups['master']

#
- debug: msg={{ gpss_new_contents_printed }}
  when: inventory_hostname in groups['master'] and print_debug

#
- name: Print the status of GPSS job
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpsscli status {{ gpss_job_name }} --gpss-port {{ gpss_port }}
  register: gpss_job_status_printed
  when: inventory_hostname in groups['master']

#
- debug: msg={{ gpss_job_status_printed }}
  when: inventory_hostname in groups['master'] and print_debug

#
- name: Print the progress of GPSS job
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gpsscli progress {{ gpss_job_name }} --gpss-port {{ gpss_port }} )
  register: gpss_job_progress_printed
  when: inventory_hostname in groups['master']

#
- debug: msg={{ gpss_job_progress_printed }}
  when: inventory_hostname in groups['master'] and print_debug
