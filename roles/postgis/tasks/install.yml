---
# Install PostsGIS extention on Greenplum database
# GPDB 4.x - 640 Page in https://gpdb.docs.pivotal.io/archive/43320/pdf/GPDB43RefGuide.pdf
# GPDB 5.x - https://docs.vmware.com/en/VMware-Greenplum/5/greenplum-database/ref_guide-extensions-postGIS.html
# GPDB 6.x - https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/analytics-postGIS.html
# GPDB 7.x - https://docs.vmware.com/en/VMware-Greenplum/7/greenplum-database/analytics-postGIS.html


- name: Check if the Greenplum Database Software is Already Installed
  stat: path={{ gpdb.base_dir }}/greenplum-db
  register: gpdb_installed


- name: Stop if Greenplum Database Software is Not Installed
  fail: msg="Greenplum Database software is not installed!"
  when: gpdb_installed.stat.exists != True


- name: Verify that Greenplum Database is Up and Running
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -c "SELECT VERSION()" )
  register: select_version
  when: inventory_hostname in groups['master']
  failed_when: "'(Greenplum Database ' not in select_version.stdout"


#- set_fact:
#    gppkg_install_cmd: "gppkg -i"
#    check_postgis_installed: "gppkg -q --all | grep postgis | cut -d - -f 1"
#  when:
#    - inventory_hostname in groups['master'] and postgis.gpdb_version|int <= 6
#
#
#- set_fact:
#    gppkg_install_cmd: "gppkg -a install"
#    check_postgis_installed: "gppkg query | grep postgis | awk '{print $1}'"
#  when:
#    - inventory_hostname in groups['master'] and postgis.gpdb_version|int >= 7


- name: Verify if PostGIS GPPKG is Installed in Greenplum Database
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ check_postgis_installed }} )
  register: postgis_installed
  when: inventory_hostname in groups['master']


- name: Print the Result if PostGIS is Installed
  debug:
    msg: "{{ postgis_installed.stdout }}"
  when: inventory_hostname in groups['master']


- name: Stop if PostGIS GPPKG Package is Installed
  fail: msg="PostGIS GPPKG Package is Already Installed!"
  when: ( inventory_hostname in groups['master'] and 'postgis' in postgis_installed.stdout )


- name: Copy PostGIS GPPKG File
  copy: src=postgis-{{ postgis.prefix_major_version }}{{ postgis.major_version }}.{{ postgis.minor_version }}{{ postgis.patch_version }}-gp{{ postgis.gpdb_version }}-{{ postgis.os_version }}-x86_64.gppkg dest={{ gpdb.admin_home_dir }} mode=0644 owner=gpadmin group=gpadmin
  when: ( inventory_hostname in groups['master'] and 'postgis' not in postgis_installed.stdout )


# https://trstringer.com/systemd-inhibitor-locks/
# stderr='warning: Unable to get systemd shutdown inhibition lock: Permission denied
- name: Install PostGIS GPPKG Package
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ gppkg_install_cmd }} {{ gpdb.admin_home_dir }}/postgis-{{ postgis.prefix_major_version }}{{ postgis.major_version }}.{{ postgis.minor_version }}{{ postgis.patch_version }}-gp{{ postgis.gpdb_version }}-{{ postgis.os_version }}-x86_64.gppkg )
  register: postgis_package_installed
  ignore_errors: true
  until: postgis_package_installed is succeeded
  retries: 10
  delay: 30
  when: ( inventory_hostname in groups['master'] and 'postgis' not in postgis_installed.stdout )


- name: Verify that Database is Existed for PostGIS
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -tAc "SELECT 100 FROM pg_database WHERE datname='{{ postgis.database_name }}'" )
  register: postgis_database_installed
  when: inventory_hostname in groups['master']


- name: Create Database for PostGIS
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && createdb {{ postgis.database_name }} )
  register: postgis_database_created
  when: ( inventory_hostname in groups['master'] and '100' not in postgis_database_installed.stdout )


- name: Restart Greenplum Database after Installing PostGIS Extension
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpstop -ra )
  async: 60
  poll: 5
  when: inventory_hostname in groups['master']


- name: Enable PostGIS and PostGIS Raster in a Database when It's less than PostGIS 2.5
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh  && {{ gpdb.base_dir }}/greenplum-db/share/postgresql/contrib/postgis-{{ postgis.major_version }}.{{ postgis.minor_version }}/postgis_manager.sh {{ postgis.database_name }} install )
  register: postgis_raster_enabled
  when: ( inventory_hostname in groups['master'] and postgis.major_version|int <= 2 and postgis.minor_version|int <= 5 )


- name: Create PostGIS Extension and Enable Raster in a Database
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ postgis.database_name }} -tAc "CREATE EXTENSION postgis;" )
  register: postgis_raster_enabled
  when: inventory_hostname in groups['master']


#- name: Enable PostGIS and PostGIS Raster in a specific schema
#  become_user: gpadmin
#  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ postgis.database_name }} -tAc "SHOW search_path; CREATE SCHEMA {{ postgis.schema_name }}; SET search_path TO {{ postgis.schema_name }}; CREATE EXTENSION postgis WITH SCHEMA {{ postgis.schema_name }};" )
#  register: postgis_raster_specific_enabled
#  when: inventory_hostname in groups['master']


- name: Enable PostGIS TIGER geocoder after Enabling the PostGIS Extension if Needed
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ postgis.database_name }} -tAc "CREATE EXTENSION fuzzystrmatch ; CREATE EXTENSION postgis_tiger_geocoder;" )
  register: postgis_raster_tiger_geocoder_enabled
  when: inventory_hostname in groups['master']


- name: Enable the Rules-based Address Standardizer and Add Rules Tables for the Standardizer
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ postgis.database_name }} -tAc "CREATE EXTENSION address_standardizer ; CREATE EXTENSION address_standardizer_data_us ;" )
  register: postgis_raster_rules_based_addr_standaizer_enabled
  when: inventory_hostname in groups['master']


- name: Enabling GDAL Raster Drivers
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ postgis.database_name }} -tAc "SET postgis.gdal_enabled_drivers TO 'GTiff PNG JPEG';" )
  register: gdal_raster_drivers_enabled
  when: inventory_hostname in groups['master']
  # This SET command sets the enabled drivers to the default for a session.
  # SET postgis.gdal_enabled_drivers = default;"


- name: Check the List of Supported GDAL Raster Drivers for a Greenplum Database System
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && raster2pgsql -G )
  register: list_supported_gdal_raster_checked
  when: inventory_hostname in groups['master']


- name: Export Line Enables for GDAL Raster Drivers
  lineinfile:
    dest: "{{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh"
    line: "{{ item }}"
    state: present
    insertafter: BOF
  with_items:
    - "export POSTGIS_GDAL_ENABLED_DRIVERS='GTiff PNG JPEG GIF'"
    - "export GDAL_DATA=$GPHOME/share/gdal"
    - "export POSTGIS_ENABLE_OUTDB_RASTERS=0"
    - "export POSTGIS_GDAL_ENABLED_DRIVERS=DISABLE_ALL"


- name: Update Settings in the greenplum_path.sh for GDAL Raster Drivers
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpstop -ra )
  async: 60
  poll: 5
  when: inventory_hostname in groups['master']


- name: Display the Enabled Raster Drivers with the ST_GDALDrivers() Function
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ postgis.database_name }} -tAc "SELECT short_name, long_name FROM ST_GDALDrivers();" )
  register: raster_drivers_st_gdal_drivers_enabled
  ignore_errors: true
  when: inventory_hostname in groups['master']


- name: Enabling Out-Of-Database Rasters
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ postgis.database_name }} -tAc "SET postgis.enable_outdb_rasters = true;" )
  register: out_of_db_raster_enabled
  when: inventory_hostname in groups['master']

