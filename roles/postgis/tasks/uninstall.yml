---
- name: Check if the Greenplum Database Software is Already Installed
  stat: path={{ gpdb.base_dir }}/greenplum-db
  register: gpdb_installed


- name: Stop if Greenplum Database Software is Not Installed
  fail: msg="Greenplum Database software is not installed!"
  when: gpdb_installed.stat.exists != True


- name: Verify that Database is Up and Running
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -c "SELECT VERSION()" )
  register: select_version
  failed_when: "'(Greenplum Database ' not in select_version.stdout"
  when: inventory_hostname in groups['master']


- name: Verify that Database for PostGIS Extention is Installed
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -tAc "SELECT 100 FROM pg_database WHERE datname='{{ postgis.database_name }}'" )
  register: postgis_database_installed
  when: inventory_hostname in groups['master']


#- set_fact:
#    postgis_package_name: "postgis-{{ postgis.major_version }}.{{ postgis.minor_version }}{{ postgis.patch_version }}"
#    gppkg_remove_cmd: "gppkg -r"
#    check_postgis_installed: "gppkg -q --all | grep postgis | cut -d - -f 1"
#  when: inventory_hostname in groups['master'] and postgis.gpdb_version|int <= 6
#
#
#- set_fact:
#    postgis_package_name: "postgis"
#    gppkg_remove_cmd: "gppkg -a -f remove"
#    check_postgis_installed: "gppkg query | grep postgis | awk '{print $1}'"
#  when: inventory_hostname in groups['master'] and postgis.gpdb_version|int >= 7


- name: Verify if PostGIS GPPKG is Installed
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ check_postgis_installed }} )
  ignore_errors: true
  register: postgis_installed
  changed_when: False
  when: inventory_hostname in groups['master']


- name: Print the Result if PostGIS is Not Installed
  debug:
    msg: "{{ postgis_installed.stdout }}"
  when: inventory_hostname in groups['master']


- name: Stop if PostGIS GPPKG Package is Not Installed
  fail: msg="PostGIS gppkg package is not installed!"
  when: ( inventory_hostname in groups['master'] and 'postgis' not in postgis_installed.stdout )


- name: Drop PostGIS Extensions
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ postgis.database_name }} -c "{{ item }}" )
  register: postgis_database_installed
  with_items:
    - "DROP EXTENSION IF EXISTS address_standardizer_data_us;"
    - "DROP EXTENSION IF EXISTS address_standardizer;"
    - "DROP EXTENSION IF EXISTS postgis_tiger_geocoder;"
    - "DROP EXTENSION IF EXISTS fuzzystrmatch;"
    - "DROP EXTENSION IF EXISTS postgis;"
  when:
    - inventory_hostname in groups['master']
    - postgis.major_version >= 2 and postgis.minor_version >= 5


- name: Drop PostGIS Database
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && dropdb {{ postgis.database_name }} )
  register: postgis_database_dropped
  when: inventory_hostname in groups['master']


- name: Uninstall the PostGIS GPPKG Pakcage
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ gppkg_remove_cmd }} {{ postgis_package_name }} )
  register: postgis_package_uninstalled
  ignore_errors: true
  until: postgis_package_uninstalled is succeeded
  retries: 10
  delay: 30
  changed_when: postgis_database_installed == True
  when: inventory_hostname in groups['master']


- name: Check if the Directory of PostGIS Package is Still Remained
  stat: path={{ gpdb.base_dir }}/greenplum-db/postgis
  register: postgis_dir_remained
  when: inventory_hostname in groups['master']


#- name: Remove PostGIS Directory still remained
#  file:
#    owner: gpadmin
#    group: gpadmin
#    path: "{{ gpdb.base_dir }}/greenplum-db/postgis"
#    state: absent
#  when:
#    - inventory_hostname in groups['master']
#    - postgis_dir_remained.stat.exists == True


- name: Delete Lines Enabled in greenplum_path.sh for GDAL Raster Drivers
  lineinfile:
    path: "{{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh"
    regexp: "{{ item }}"
    state: absent
    backup: yes
  with_items:
    - "^export POSTGIS_GDAL_ENABLED_DRIVERS=*"
    - "^export GDAL_DATA=*"
    - "^export POSTGIS_ENABLE_OUTDB_RASTERS=*"
    - "^export POSTGIS_GDAL_ENABLED_DRIVERS=*"


- name: Restart Greenplum Database after Removing PostGIS Extension
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpstop -ra )
  async: 60
  poll: 5
  when: inventory_hostname in groups['master']

