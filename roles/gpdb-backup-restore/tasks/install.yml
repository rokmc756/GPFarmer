---
# Install GPDB Backup and Restore utility

#
- name: Check if the Greenplum Database software is already installed
  stat: path={{ gpdb_base_dir }}/greenplum-db
  register: gpdb_installed

#
- name: Stop if database software is not installed
  fail: msg="Greenplum Database software is not installed!"
  when: gpdb_installed.stat.exists != True

#
- name: Copy gpbackup and gprestore tarball file
  copy: src={{ package_name }}-{{ major_version }}.{{ minor_version }}.{{ patch_version }}.tar.gz dest={{ gpadmin_home_dir }}/{{ package_name }}-{{ major_version }}.{{ minor_version }}.{{ patch_version }}.tar.gz mode=0644 owner=gpadmin group=gpadmin
  when: gpdb_installed.stat.exists != False

#- name: Install gpbackup and gprestore gppkg file
#  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && gppkg -i {{ gpadmin_home_dir }}/{{ package_name }}-{{ major_version }}.{{ minor_version }}.{{ patch_version }}-{{ gpdb_version }}-rhel-x86_64.gppkg )
#  when: gpdb_installed.stat.exists != False

#
- name: Unzip gpbackup and gprestore archive
  unarchive: src={{ gpadmin_home_dir }}/{{ package_name }}-{{ major_version }}.{{ minor_version }}.{{ patch_version }}.tar.gz dest={{ gpdb_base_dir }}/greenplum-db remote_src=yes mode=0755 owner=gpadmin group=gpadmin
  when: gpdb_installed.stat.exists != False

#
- name: Verify that database for pgcrypto is installed
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -tAc "SELECT 100 FROM pg_database WHERE datname='{{ database_name }}'" )
  register: test_database_installed
  when: inventory_hostname in groups['master']

#
- name: Create database for pgcrypto
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && createdb {{ database_name }} )
  register: test_database_created
  when:
    - inventory_hostname in groups['master']
    - "'100' not in test_database_installed.stdout"

#
- name:  Install pgcrypto extension
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ database_name }} -c "CREATE EXTENSION pgcrypto;" )
  register: pgcrypto_extension_installed
  when:
    - inventory_hostname in groups['master']
    - "'100' not in test_database_installed.stdout"

#
- name: Verify the pgcrypto functions are installed in the test database by listing a pgcrypto function
  become_user: gpadmin
  shell: ( . {{ gpdb_base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ database_name }} -c "\df digest;" )
  register: pgcrypto_functions_verified
  when:
    - inventory_hostname in groups['master']
    - "'100' not in test_database_installed.stdout"

#
- debug:
    var: pgcrypto_functions_verified
  when: inventory_hostname in groups['master']
