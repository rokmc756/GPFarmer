---
- name: Check if the Greenplum Database Software is Already Installed
  stat: path={{ gpdb.base_dir }}/greenplum-db
  register: gpdb_installed


- name: Stop if Greenplum Database Software is Not Installed
  fail: msg="Greenplum Database software is not installed!"
  when: gpdb_installed.stat.exists != True


- name: Get Kernel version
  shell: uname -r | egrep '^[0-9]*\.[0-9]*' -o
  args:
    executable: /bin/bash
  register: kernel_shell_output

- debug: msg={{ kernel_shell_output.stdout}}


- name: Stop Installing PL/Container due to Kernel Version is Not Enough
  fail: msg="{{ kernel_shell_output.stdout }} - Kernel version should be higher than 3.10"
  when: kernel_shell_output.stdout < "3.10"


- name: Install the Dependencies Required for Docker
  yum: name={{ item }} state=present
  with_items:
    - yum-utils
    - device-mapper-persistent-data
    - lvm2
  register: dependent_packages_intalled
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int >= 5


- name: Add the Docker Repository
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docker-ce.repo
  register: docker_repo_added
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky"


#- name: Copy CentOS extra repo for dependent packages of docker-ce
#  become_user: root
#  copy: src=CentOS-7-extra.repo dest=/etc/yum.repos.d/ mode=0644 owner=root group=root
#  register: centos_extra_repo_copied
#  when:
#    - inventory_hostname in groups['master']


- name: Update YUM Cache
  become_user: gpadmin
  changed_when: False
  shell: sudo yum makecache
  args:
    executable: /bin/bash
  register: yum_cache_updated
  when:
    - ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int >= 5
    - update_cache == true
  # shell: sudo yum makecache fast


- name: Install the Dependencies Required for Ubuntu/Deian
  apt: name={{ item }} state=present
  with_items:
    - curl
    - apt-transport-https
    - ca-certificates
    - software-properties-common
  register: dependent_packages_intalled
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 18


- name: Copy the Dependent RPM Packages of docker-ce's Latest Version for RHEL/CentOS/Rocky 7.x
  become_user: root
  copy: src=el7/{{ item }} dest=/root/{{ item }} mode=0644 owner=root group=root
  with_items:
    - container-selinux-2.107-3.el7.noarch.rpm
    - fuse-overlayfs-0.7.2-6.el7_8.x86_64.rpm
    - slirp4netns-0.4.3-4.el7_8.x86_64.rpm
  register: dependent_pkgs_docker_rhel7_copied
  when: ansible_distribution == "RedHat" and ansible_distribution_major_version|int == 7


- name: Install the Dependent RPM Packages of docker-ce's Latest Version for RHEL/CentOS/Rocky 7.x
  become_user: root
  yum: name=/root/{{ item }} state=present
  with_items:
    - container-selinux-2.107-3.el7.noarch.rpm
    - fuse-overlayfs-0.7.2-6.el7_8.x86_64.rpm
    - slirp4netns-0.4.3-4.el7_8.x86_64.rpm
  register: dependent_pkgs_docker_rhel7_installled
  when: ansible_distribution == "RedHat" and ansible_distribution_major_version|int == 7


- name: Add the Docker Repository for RedHat/CentOS/Rocky Linux
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docker-ce.repo
  register: docker_repo_added
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky"


- name: Add the GPG Key for Docker for Ubuntu/Debian
  become: yes
  become_user: root
  shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  args:
    executable: /bin/bash
  register: gpg_key_added
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 18


- name: Add Docker Repository for Ubuntu/Debian
  become: true
  become_user: root
  shell: add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  args:
    executable: /bin/bash
  register: docker_repository_added
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 18


- name: Update the Repository Information
  # become: true
  # ecome_user: root
  shell: apt-get update
  args:
    executable: /bin/bash
  register: apt_get_updated
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 18


- name: Make Sure Installing from the Docker Repository instead of the Default Ubuntu Repository
  # become: true
  # become_user: root
  shell: apt-cache policy docker-ce
  args:
    executable: /bin/bash
  register: apt_cache_policy
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 18


- name: Install Docker
  package: name={{ item }} state=present
  with_items:
    - docker-ce
  register: doker_installed


- name: Start Docker daemon
  systemd:
    name: docker
    state: started
    enabled: yes
  register: docker_enabled
  until: docker_enabled is succeeded
  retries: 10
  delay: 10
  #  masked: no


- name: Assign the Greenplum Database Administrator User, GPadmin User to the Docker Group
  become_user: gpadmin
  changed_when: False
  shell: sudo usermod -aG docker gpadmin
  args:
    executable: /bin/bash
  register: to_docker_group_assigned


- name: Change Permission for Docker Socket
  become_user: gpadmin
  changed_when: False
  shell: sudo chmod 666 /var/run/docker.sock; sudo chown root.docker /var/run/docker.sock
  args:
    executable: /bin/bash
  register: docker_permission_changed


- name: Lists the Currently Running Docker Containers
  become_user: gpadmin
  changed_when: False
  shell: sudo docker ps
  args:
    executable: /bin/bash
  register: ps_docker_listed


- name: Restart the Greenplum Database to Access for Docker
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpstop -ra )
  args:
    executable: /bin/bash
  async: 60
  poll: 5
  when:
    - inventory_hostname in groups['master']


- name: Verify that Greenplum Database is Up and Running
  become_user: gpadmin
  changed_when: False
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -c "SELECT VERSION()" )
  args:
    executable: /bin/bash
  register: running_database_checked
  when: inventory_hostname in groups['master']
  failed_when: "'(Greenplum Database ' not in running_database_checked.stdout"


- set_fact:
    gppkg_install_cmd: "gppkg -i"
    check_plr_installed: "gppkg -q --all | grep plr | cut -d - -f 1"
    check_plcon_installed: "gppkg -q --all | grep plcontainer | cut -d - -f 1"
    plcon_package_name: plcontainer-{{ plcon.prefix_major_version }}{{ plcon.major_version }}.{{ plcon.minor_version }}.{{ plcon.patch_version }}-gp{{ plcon.gpdb_version }}-{{ plcon.os_version }}_{{ plcon.arch_type }}.gppkg
    plr_package_name: plr-{{ plr.prefix_major_version }}{{ plr.major_version }}.{{ plr.minor_version }}.{{ plr.patch_version }}-gp{{ plr.gpdb_version }}-{{ plr.os_version }}-{{ plr.arch_type }}.gppkg
  when: inventory_hostname in groups['master'] and plcon.gpdb_version <= 6


- set_fact:
    gppkg_install_cmd: "gppkg -a install"
    check_plr_installed: "gppkg query | grep plr | awk '{print $1}'"
    check_plcon_installed: "gppkg query | grep plcontainer | awk '{print $1}'"
    plcon_package_name: plcontainer-{{ plcon.prefix_major_version }}{{ plcon.major_version }}.{{ plcon.minor_version }}.{{ plcon.patch_version }}-gp{{ plcon.gpdb_version }}-{{ plcon.os_version }}_{{ plcon.arch_type }}.gppkg
    plr_package_name: plr-{{ plr.prefix_major_version }}{{ plr.major_version }}.{{ plr.minor_version }}.{{ plr.patch_version }}-gp{{ plr.gpdb_version }}-{{ plr.os_version }}-{{ plr.arch_type }}.gppkg
  when: inventory_hostname in groups['master'] and plcon.gpdb_version >= 7


- name: Verify if PL/Container Package is Installed
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ check_plcon_installed }} )
  args:
    executable: /bin/bash
  ignore_errors: true
  register: plcon_installed
  changed_when: False
  when: inventory_hostname in groups['master']


- name: Stop if PL/Container Package is Already Installed
  fail: msg="PL/Container gppkg package is already installed!"
  when: ( inventory_hostname in groups['master'] and 'plcontainer' in plcon_installed.stdout )


- name: Copy PL/Container Package File
  copy: src={{ plcon_package_name }} dest={{ gpdb.admin_home_dir }} mode=0644 owner=gpadmin group=gpadmin
  register: plcon_gppkg_copied
  when: ( inventory_hostname in groups['master'] and 'plcontainer' not in plcon_installed.stdout )


- name: Install PL/Container Package
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ gppkg_install_cmd }} {{ gpdb.admin_home_dir }}/{{ plcon_package_name }} )
  args:
    executable: /bin/bash
  register: plcon_plcon_installed
  ignore_errors: true
  when: ( inventory_hostname in groups['master'] and 'plcontainer' not in plcon_installed.stdout )


- name: Verify if PL/R Pakcage is Installed
  become_user: gpadmin
  shell: ( source {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ check_plr_installed }} )
  args:
    executable: /bin/bash
  ignore_errors: true
  register: plr_installed
  changed_when: False
  when: inventory_hostname in groups['master']


- name: Stop if PL/R Package is Already Installed
  fail: msg="PLR gppkg package is already installed!"
  when: ( inventory_hostname in groups['master'] and 'plr' in plr_installed.stdout )


- name: Copy PL/R Package
  copy: src={{ plr_package_name }} dest={{ gpdb.admin_home_dir }} mode=0644 owner=gpadmin group=gpadmin
  register: plr_gppkg_copied
  when: ( inventory_hostname in groups['master'] and 'plr' not in plr_installed.stdout )


- name: Install PL/R Package
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && {{ gppkg_install_cmd }} {{ gpdb.admin_home_dir }}/{{ plr_package_name }} )
  args:
    executable: /bin/bash
  register: plr_gppkg_installed
  ignore_errors: true
  when: ( inventory_hostname in groups['master'] and 'plr' not in plr_installed.stdout )


- name: Restart Greenplum Database and Apply Parameters for PL/Container in greenplum_path.sh
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpstop -ra )
  args:
    executable: /bin/bash
  async: 60
  poll: 5
  when: inventory_hostname in groups['master']


- name: Add the plc_coordinator Shared Library to the Greenplum Database shared_preload_libraries Parameter
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && gpconfig -s shared_preload_libraries )
  args:
    executable: /bin/bash
  register: plcon_shared_library_added
  when: inventory_hostname in groups['master']


- name: Verify that Database for PL/Container is Installed
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -tAc "SELECT 100 FROM pg_database WHERE datname='{{ plcon.database_name }}'" )
  args:
    executable: /bin/bash
  register: plcon_database_installed
  when: inventory_hostname in groups['master']


- name: Create Database for PL/Container
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && createdb {{ plcon.database_name }} )
  args:
    executable: /bin/bash
  register: plcon_database_created
  when: ( inventory_hostname in groups['master'] and '100' not in plcon_database_installed.stdout )


- name: Create PL/Container Extension for a Database
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ plcon.database_name }} -c "CREATE EXTENSION plcontainer" )
  args:
    executable: /bin/bash
  register: plcon_extension_database_created
  when: ( inventory_hostname in groups['master'] and plcon_database_created.rc == 0 )


- name: Verify that Database for PL/R is Installed
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -tAc "SELECT 100 FROM pg_database WHERE datname='{{ plr.database_name }}'" )
  args:
    executable: /bin/bash
  register: plr_database_installed
  when: inventory_hostname in groups['master']


- name: Create a Database for PL/R
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && createdb {{ plr.database_name }} )
  args:
    executable: /bin/bash
  register: plr_database_created
  when: ( inventory_hostname in groups['master'] and '100' not in plr_database_installed.stdout )


- name: Create PL/R Extension for a Database
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && psql -d {{ plr.database_name }} -c "CREATE EXTENSION plr" )
  args:
    executable: /bin/bash
  register: plr_extension_database_created
  when: ( inventory_hostname in groups['master'] and plr_database_created.rc == 0 )


- name: Copy PL/Container Python Docker Image
  copy: src=plcontainer-python-image-{{ plcon.prefix_major_version }}{{ plcon.major_version }}.{{ plcon.minor_version }}.{{ plcon.patch_version }}-gp{{ plcon.gpdb_version }}.tar.gz dest={{ gpdb.admin_home_dir }} mode=0644 owner=gpadmin group=gpadmin
  register: python_docker_image_copied
  when: inventory_hostname in groups['master'] and plcon.gpdb_version <= 6


- name: Copy PL/Container Python3 Docker Image
  copy: src=plcontainer-python3-image-{{ plcon.prefix_major_version }}{{ plcon.major_version }}.{{ plcon.minor_version }}.{{ plcon.patch_version }}-gp{{ plcon.gpdb_version }}.tar.gz dest={{ gpdb.admin_home_dir }} mode=0644 owner=gpadmin group=gpadmin
  register: python3_docker_image_copied
  when: inventory_hostname in groups['master'] and plcon.gpdb_version >= 7


#- name: Copy plcontainer R docker image
#  copy: src=plcontainer-r-image-{{ plcon.prefix_major_version }}{{ plcon.major_version }}.{{ plcon.docker_minor_version }}-gp{{ plcon.gpdb_version }}.tar.gz dest={{ gpdb.admin_home_dir }} mode=0644 owner=gpadmin group=gpadmin
#  register: r_docker_image_copied
#  when: inventory_hostname in groups['master']

# - name: Copy PL/Container R beta docker image
#  copy: src=plcontainer-r-image-{{ plcon.prefix_major_version }}{{ plcon.major_version }}.{{ plcon.minor_version }}.{{ plcon.patch_version }}-{{ plcon.gpdb_version }}.tar.gz dest={{ gpdb.admin_home_dir }} mode=0644 owner=gpadmin group=gpadmin
#  when:
#    - inventory_hostname in groups['master']
#    - "'package plcontainer is not installed' in plcon_installed.stdout"

#
- name: Display the Docker Images Installed
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && plcontainer image-list )
  args:
    executable: /bin/bash
  register: installed_docker_images_listed
  when: inventory_hostname in groups['master']


# Add a Python 2 based runtime
- name: Add a Python Based Runtime
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && plcontainer runtime-add -r plc_python_shared -i pivotaldata/plcon_python_shared:devel -l python )
  args:
    executable: /bin/bash
  register: python_based_runtime_added
  when: ( inventory_hostname in groups['master'] and installed_docker_images_listed.stdout.find('plc_python_shared') != -1 )


- name: Add a Python 3 Based Runtime that is Supported with PL/Container 2.1.x
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && plcontainer runtime-add -r plc_python3_shared -i pivotaldata/plcon_python3_shared:devel -l python3 )
  args:
    executable: /bin/bash
  register: python3_based_runtime_added
  when: ( inventory_hostname in groups['master'] and  installed_docker_images_listed.stdout.find('plc_python3_shared') != -1 )


#- name: Add an R based runtime
#  become_user: gpadmin
#  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && plcontainer runtime-add -r plc_r_shared -i pivotaldata/plcon_r_shared:devel -l r )
#  args:
#    executable: /bin/bash
#  register: r_based_runtime_added
#  when: ( inventory_hostname in groups['master'] and installed_docker_images_listed.stdout.find('plc_r_shared') != -1 )


- name: List the Names of the Runtimes Your Created and Added to the PL/Container XML File
  become_user: gpadmin
  shell: ( . {{ gpdb.base_dir }}/greenplum-db/greenplum_path.sh && plcontainer runtime-show )
  args:
    executable: /bin/bash
  register: plcon_runtime_listed
  when: inventory_hostname in groups['master']


- name: Print List of the Names of the Runtimes
  debug: msg={{ plcon_runtime_listed }}
  when: inventory_hostname in groups['master']

