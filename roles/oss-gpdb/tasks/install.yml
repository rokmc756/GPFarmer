---

# Install Greenplum Database on Red Hat / CentOS

# new installation: {{ gpdb_base_dir }}/greenplum-db must not exist
#          upgrade: {{ gpdb_base_dir }}/greenplum-db-{ new version } must not exist
#       linkchange: {{ gpdb_base_dir }} /greenplum-db points to another directory

- name: Check if any version of Greenplum Database is already installed
  stat: path=/home/gpadmin/greenplum-db
  register: gpdb_installed

- name: Check if the Greenplum Database version is already installed
  stat: path=/home/gpadmin/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}
  register: gpdb_version_installed

- name: Sanity check for {{ gpdb_base_dir }}/greenplum-db
  fail: msg="/home/gpadmin/greenplum-db is supposed to be a symlink!"
  when: gpdb_installed.stat.exists == True and gpdb_installed.stat.islnk != True

- name: Get the specific ip addresses to be used
  set_fact:
    prod_ip_addr: "{{ item }}"
  when: "item | ipaddr(' {{ gpdb_network_range }}/24')"
  with_items: "{{ ansible_all_ipv4_addresses }}"

- name: Set default values for run mode variables
  set_fact:
    gpdb_install: False
    gpdb_upgrade: False
    gpdb_linkchange: False

# Non-existent {{ gpdb_base_dir }}/greenplum-db is a new installation
- name: Identify Greenplum Database Installation
  set_fact:
    gpdb_install: True
  when: gpdb_installed.stat.exists != True

# If {{ gpdb_base_dir }}/greenplum-db-{ new version } does not exists, it's an upgrade
- name: Identify Greenplum Database Upgrade
  set_fact:
    gpdb_upgrade: True
  when: gpdb_installed.stat.exists == True and gpdb_version_installed.stat.exists != True

# If the link points to a different existing directory, it's a link change
- name: Identify Greenplum Database Linkchange
  set_fact:
    gpdb_linkchange: True
  when: gpdb_installed.stat.exists == True and gpdb_version_installed.stat.exists == True and gpdb_installed.stat.lnk_source != "/home/gpadmin/greenplum-db-{{ gpdb_major_version }}.{{ gpdb_minor_version }}"

- name: Greenplum Database Installation
  debug: msg="New Greenplum Database installation"
  when: gpdb_install == True

- name: Greenplum Database Linkchange
  debug: msg="Changing link to Greenplum Database version"
  when: gpdb_linkchange == True

- name: Greenplum Database - Nothing to do
  debug: msg="Nothing to do (no installation/upgrade required)"
  when: gpdb_install == False and gpdb_upgrade == False and gpdb_linkchange == False

###########################################################
# Basic system setup

- name: gpadmin group
  group: name=gpadmin state=present

# do not create ssh keys
# this conflicts somehow with gpssh-exkeys
- name: gpadmin user
  user: name=gpadmin password="{{ 'changeme' | password_hash('sha512') }}" comment='Greenplum Administrator' createhome=yes shell=/bin/bash generate_ssh_key=no groups=gpadmin append=yes state=present
  changed_when: False

- name: Fix ownership for /home/gpadmin/
  file: path={{ gpdb_base_dir }} state=directory mode=0755 owner=gpadmin group=gpadmin

# Need to check if it works
- name: Stop and disable iptables
  service: name=iptables state=stopped enabled=no
  changed_when: False
  when:
    - hostvars[inventory_hostname].ansible_distribution_major_version == 6 or hostvars[inventory_hostname].ansible_distribution_major_version == 5

- name: Stop and disable firewalld
  service: name=firewalld state=stopped enabled=no
  changed_when: False
  when:
    - hostvars[inventory_hostname].ansible_distribution_major_version == 7

- name: Disable selinux
  selinux: state=disabled
  notify:
    - restart system
    - waiting for server to come back after reboot

- name: Modify /etc/sysctl.conf
  lineinfile:
    dest: /etc/sysctl.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^kernel.shmmax', line: '{{ gpdb_kernel_shmmax }}', state: present }
    - { regexp: '^kernel.shmmni', line: '{{ gpdb_kernel_shmmni }}', state: present }
    - { regexp: '^kernel.shmall', line: '{{ gpdb_kernel_shmall }}', state: present }
    - { regexp: '^kernel.sem', line: '{{ gpdb_kernel_sem }}', state: present }
    - { regexp: '^kernel.sysrq', line: '{{ gpdb_kernel_sysrq }}', state: present }
    - { regexp: '^kernel.core_uses_pid', line: '{{ gpdb_kernel_core_uses_pid }}', state: present }
    - { regexp: '^kernel.msgmnb', line: '{{ gpdb_kernel_msgmnb }}', state: present }
    - { regexp: '^kernel.msgmax', line: '{{ gpdb_kernel_msgmax }}', state: present }
    - { regexp: '^kernel.msgmni', line: '{{ gpdb_kernel_msgmni }}', state: present }
    - { regexp: '^net.ipv4.tcp_syncookies', line: '{{ gpdb_net_ipv4_tcp_syncookies }}', state: present }
    - { regexp: '^net.ipv4.ip_forward', line: '{{ gpdb_net_ipv4_ip_forward }}', state: present }
    - { regexp: '^net.ipv4.conf.default.accept_source_route', line: '{{ gpdb_net_ipv4_conf_default_accept_source_route }}', state: present }
    - { regexp: '^net.ipv4.tcp_tw_recycle', line: '{{ gpdb_net_ipv4_tcp_tw_recycle }}', state: present }
    - { regexp: '^net.ipv4.tcp_max_syn_backlog', line: '{{ gpdb_net_ipv4_tcp_max_syn_backlog }}', state: present }
    - { regexp: '^net.ipv4.conf.all.arp_filter', line: '{{ gpdb_net_ipv4_conf_all_arp_filter }}', state: present }
    - { regexp: '^net.ipv4.ip_local_port_range', line: '{{ gpdb_net_ipv4_ip_local_port_range }}', state: present }
    - { regexp: '^net.core.netdev_max_backlog', line: '{{ gpdb_net_core_netdev_max_backlog }}', state: present }
    - { regexp: '^net.core.rmem_max', line: '{{ gpdb_net_core_rmem_max }}', state: present }
    - { regexp: '^net.core.wmem_max', line: '{{ gpdb_net_core_wmem_max }}', state: present }
    - { regexp: '^vm.overcommit_memory', line: '{{ gpdb_vm_overcommit_memory }}', state: present }
  notify:
    - reload sysctl

- name: Modify /etc/ssh/sshd_config
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin yes', state: present }
  notify:
    - reload sshd

#
- name: Install git to download GPDB source code from GitHub
  become: yes
  yum:
    name: git
    state: present
  async: 120
  poll: 5
    # - seg_serialized_install == False
    # - gpdb_initdb_single == False and seg_serialized_install == False

- name: Check if any version of GPDB source code is already downloaded
  stat: path=/home/gpadmin/gpdb
  register: oss_gpdb_downloaded

- name: Check if any version of GP Xerces source code is already downloaded
  stat: path=/home/gpadmin/gp-xerces
  register: gp_xerces_downloaded

#
- name: Download the GPDB source code from the GitRepo
  become: yes
  become_user: gpadmin
  git:
    repo: "https://github.com/greenplum-db/gpdb"
    dest: "/home/gpadmin/gpdb"
  when: oss_gpdb_downloaded.stat.exists != True

- name: Download the GP Xerces's source code from the GitRepo
  become: yes
  become_user: gpadmin
  git:
    repo: "https://github.com/greenplum-db/gp-xerces"
    dest: "/home/gpadmin/gp-xerces"
  when:
    - gp_xerces_downloaded.stat.exists != True
    - ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '>=') )

#
- name: Install epel-release package
  become: yes
  yum:
    name: epel-release
    state: present
  async: 120
  poll: 5
    # - seg_serialized_install == False
    # - gpdb_initdb_single == False and seg_serialized_install == False

- name: Install epel-release package
  become: yes
  yum:
    name: "{{ item }}"
    state: present
  async: 120
  poll: 5
  with_items:
    - "python3-devel"
    - "cmake3"
    - "python3-pip"
    - "apr-devel"
    - "bzip2-devel"
    - "bison"
    - "flex"
    - "gcc"
    - "gcc-c++"
    - "krb5-devel"
    - "binutils"
    - "libcurl-devel"
    - "libevent-devel"
    - "libxml2-devel"
    - "libzstd-devel"
    - "openssl-devel"
    - "perl-ExtUtils-Embed"
    - "readline-devel"
    - "xerces-c-devel"
    - "zlib-devel"
    - "postgresql"
    - "postgresql-devel"
    - "numactl-devel"
    - "numactl-libs"
    #- "libkadm5"
    #- "libyaml-devel"
    # - "PyYAML"
    # - "tee"
    # - seg_serialized_install == False
    # - gpdb_initdb_single == False and seg_serialized_install == False
    # xalan-c
    # xalan-c-devel

- name: Install libyaml-devel package
  become: yes
  yum:
    name: libyaml-devel
    state: present
  async: 120
  poll: 5
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '<=') )
    # - seg_serialized_install == False
    # - gpdb_initdb_single == False and seg_serialized_install == False

#
- name: Install pyton2-pip package for lower versions than {{ ansible_distribution }} {{ ansible_distirbution_major_version }}
  become: yes
  yum:
    name: "{{ item }}"
    state: present
  async: 120
  poll: 5
  with_items:
    - "python2-pip"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('9', '<') )

#- name: Install python-setuptools
#  become: yes
#  yum:
#    name: python-setuptools
#    state: present
#  async: 120
#  poll: 5
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('7', '==') )

#
- name: Install alternative python 2 version
  become: true
  shell: ( update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1 )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('9', '<') )

#
- name: Install alternative python 3 version
  become: true
  shell: ( update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2 )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('7', '==') )
#  ignore_errors: yes
#  register: python_version_alternative

#
- name: Install alternative python 3 version
  become: true
  shell: ( update-alternatives --install /usr/bin/python python /usr/bin/python3.9 2 )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '>=') )
#  ignore_errors: yes
#  register: python_version_alternative


#- debug:
#    var: python_version_alternative

- name: Alternative python versions
  become: true
  shell: ( update-alternatives --set python /usr/bin/python2.7 )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('9', '<') )

- name: Alternative python versions
  become: true
  shell: ( update-alternatives --set python /usr/bin/python3.9 )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('9', '>=') )

#- name: Install setuptools pip module for {{ ansible_distribution }} {{ ansible_distribution_major_version }}
#  become: yes
#  pip:
#    name: setuptools
#    executable: pip2
#    extra_args: --upgrade
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('7', '==') )

- name: Install setuptools pip module for {{ ansible_distribution }} {{ ansible_distribution_major_version }}
  become: yes
  shell: ( sudo pip2 install setuptools )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '<=') )

- name: Install setuptools pip module for {{ ansible_distribution }} {{ ansible_distribution_major_version }}
  become: yes
  shell: ( sudo pip3 install setuptools )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('9', '>=') )

#- name: Install setuptools pip module for {{ ansible_distribution }} {{ ansible_distribution_major_version }}
#  become: yes
#  pip:
#    name: setuptools
#    executable: pip2
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '>=') )
#
#- name: Upgrade setuptools pip module in rkl8
#  become: yes
#  become_user: gpadmin
#  shell: ( pip3 install setuptools )
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '>=') )

#
- name: Install extra Python modules to prepare development for gpdb in {{ ansible_distribution }} {{ ansible_distribution_major_version }}
  become: yes
  shell: ( sudo pip2 install -r /home/gpadmin/gpdb/python-dependencies.txt )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '<=') )

#
- name: Install extra Python modules to prepare development for gpdb in {{ ansible_distribution }} {{ ansible_distribution_major_version }}
  become: yes
  shell: ( sudo pip3 install -r /home/gpadmin/gpdb/python-dependencies.txt )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('9', '>=') )

#
# - name: Install extra Python modules to prepare development for gpdb
#  become: yes
#  pip:
#    executable: pip2
#    requirements: /home/gpadmin/gpdb/python-dependencies.txt
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('7', '>=') )
#  # extra_args: -r
#  # extra_args: -i https://example.com/pypi/simple

#- name: Install extra Python modules to prepare development for gpdb
#  become: yes
#  pip:
#    executable: pip2.7
#    requirements: /home/gpadmin/gpdb/python-developer-dependencies.txt
#  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('7', '>=') )
#  # extra_args: -r
#  # extra_args: -i https://example.com/pypi/simple

#
- name: Install Development tools
  become: yes
  yum:
    name: ["@Development tools"]
  async: 120
  poll: 5

#
- name: Install packages from "Development tools" group and toolchain to use higher version of gcc,g++
  become: yes
  yum:
    name: "{{ item }}"
    state: present
  async: 120
  poll: 5
  when:
  with_items:
    - "python-psutil"
    - "python-devel"
    - "centos-release-scl"
    - "devtoolset-7-toolchain"
  when:
    - ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('7', '==') )

#
- name: Install packages from "Development tools" group and toolchain to use higher version of gcc,g++
  become: yes
  yum:
    name: "{{ item }}"
    state: present
  async: 120
  poll: 5
  with_items:
    - "python2-psutil"
    - "python2-devel"
    - "python2-pip"
    - "gcc-toolset-11"
  when:
    - ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '==') )

#
- name: Install packages from "Development tools" group and toolchain to use higher version of gcc,g++
  become: yes
  yum:
    name: "{{ item }}"
    state: present
  async: 120
  poll: 5
  with_items:
    - "python3-psutil"
    - "python3-devel"
    - "python3-pip"
    - "perl-Opcode"
  when:
    - ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('9', '>=') )

#
# $ sudo dnf config-manager --set-enabled powertools
# $ sudo dnf install ninja-build

#
- name: Change base directory into devtoolset to use higher version of gcc, g++
  become: yes
  become_user: gpadmin
  lineinfile:
    path: ~/.bashrc
    line: source scl_source enable devtoolset-7
    insertafter: alias.*
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('7', '==') )

#
- name: Change base directory into devtoolset to use higher version of gcc, g++
  become: yes
  become_user: gpadmin
  lineinfile:
    path: ~/.bashrc
    line: source scl_source enable gcc-toolset-11
    insertafter: alias.*
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '==') )
    # line: source scl_source enable devtoolset-7
    # source scl_source enable gcc-toolset-12

#
- name: Apply new variables in .bashrc
  become: yes
  become_user: gpadmin
  shell: ( source ~/.bashrc )
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '<=') )

#
#- name: Checkout GP Xerces version to install
#  become: yes
#  become_user: gpadmin
#  shell: ( cd /home/gpadmin/gp-xerces ; sudo git checkout 6.21.0 )

#
#- name: Initialize and update submodules in the repository
#  become: yes
#  become_user: gpadmin
#  shell: ( cd /home/gpadmin/gp-xerces ; sudo git submodule update --init )

#
- name: Checkout GPDB version to install
  become: yes
  become_user: gpadmin
  shell: ( cd /home/gpadmin/gpdb ; sudo git checkout 6.20.0 )

#
- name: Initialize and update submodules in the repository
  become: yes
  become_user: gpadmin
  shell: ( cd /home/gpadmin/gpdb ; sudo git submodule update --init )

#
- name: Configure build environment to install at /home/gpadmin/gpdb
  become: yes
  become_user: gpadmin
  shell: ( cd /home/gpadmin/gpdb ; sudo ./configure --with-perl --with-python --with-libxml --enable-debug --enable-debug-extensions --with-gssapi --prefix=/home/gpadmin/greenplum-db )
  async: 180
  poll: 5
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('7', '==') )

# Uninstall xerces-c and development package before comiple since the version of libxerces-c and -devel packages is 3.2.3 and higher in Rocky 8 and higher version
# and it's lined when compiling internal gporca and got error due to undefined functions especially libxerces-c 3_1.
- name: Uninstall xerces-c and xerces-c-devel packages
  become: yes
  yum:
    name: "{{ item }}"
    state: absent
  async: 120
  poll: 5
  with_items:
    - "xerces-c"
    - "xerces-c-devel"
  when:
    - ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '>=') )

#
- name: Configure build environment to install at /home/gpadmin/gp-xerces
  become: yes
  become_user: gpadmin
  shell: ( cd /home/gpadmin/gp-xerces ; env CFLAGS="-g" CXXFLAGS="-g" ./configure --prefix=/usr/local )
  async: 150
  poll: 5
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '>=') )

# CFLAGS="-I/usr/local/include" make -j8
- name: Compile and install GP Xerces binary and library
  become: yes
  become_user: gpadmin
  shell: ( cd /home/gpadmin/gp-xerces ; make -j8 && sudo make -j8 install )
  async: 900
  poll: 5
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '>=') )

- name: Configure build environment to install at /home/gpadmin/greenplum-db
  become: yes
  become_user: gpadmin
  shell: ( cd /home/gpadmin/gpdb ; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib && ./configure --with-perl --with-python --with-libxml --enable-debug --enable-debug-extensions --with-gssapi --prefix=/home/gpadmin/greenplum-db )
  async: 180
  poll: 5
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '>=') )
  # shell: ( cd /home/gpadmin/gpdb ; sudo ./configure --with-perl --with-python --with-libxml --enable-debug --enable-debug-extensions --with-gssapi --disable-orca --prefix=/usr/local/greenplum-db )

#
- name: Change owner and group for gpdb home diretories
  become: yes
  become_user: gpadmin
  shell: "sudo chown -R gpadmin:gpadmin {{ item }}"
  with_items:
    - "/home/gpadmin/gpdb"
#    - "/home/gpadmin/greenplum-db"

#
- name: Compile and install gpdb binary and library
  become: yes
  become_user: gpadmin
  shell: ( cd /home/gpadmin/gpdb ; make -j8 && make -j8 install )
  async: 900
  poll: 5
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('7', '>=') )

#
- name: Distribute the ssh key to the remote hosts
  become: yes
  become_user: gpadmin
  shell: "sshpass -p \"{{sudo_user_pass}}\" ssh-copy-id -i ~/.ssh/{{ssh_key_filename}}.pub \"{{sudo_user}}@{{ansible_hostname}}\""
  register: ssh_copy_id_execution
  failed_when:
    - ssh_copy_id_execution.rc != 0

# the greenplum_path.sh from the new installation does not have $MASTER_DATA_DIRECTORY
- name: Add /usr/local/lib directory into LD_LIBRARY_PATH variable in greenplum_path.sh for GP Xerces library
  lineinfile:
    dest: "/home/gpadmin/greenplum-db/greenplum_path.sh"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^export LD_LIBRARY_PATH', line: 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib', state: present }
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ( ansible_distribution_major_version is version_compare('8', '>=') )
  #  - gpdb_install == True or gpdb_upgrade == True

#
- name: Start demo cluster
  become: yes
  become_user: gpadmin
  shell: ( cd /home/gpadmin/gpdb ; . /home/gpadmin/greenplum-db/greenplum_path.sh && make create-demo-cluster )
  async: 180
  poll: 5
