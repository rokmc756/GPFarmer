;; database name = connect string
;;
;; connect string params:
;;   dbname= host= port= user= password=
;;   client_encoding= datestyle= timezone=
;;   pool_size= connect_query=
[databases]

; foodb over unix socket
;foodb =

; redirect bardb to bazdb on localhost
;bardb = host=localhost dbname=bazdb

; access to dest database will go with single user
;forcedb = host=127.0.0.1 port=300 user=baz password=foo client_encoding=UNICODE datestyle=ISO connect_query='SELECT 1'

; use custom pool sizes
;nondefaultdb = pool_size=50 reserve_pool_size=10

; fallback connect string
;* = host=testserver

{% for db in _pgbouncer.databases %}
{{ db.name }} = {% for key, value in db.items() %}{% if key != 'name' %}{{ key }}={{ value }} {% endif %}{% endfor %}

{% endfor %}

;; Configuration section
[pgbouncer]

;;;
;;; Administrative settings
;;;

logfile = {{ _pgbouncer.logfile }}
pidfile = {{ _pgbouncer.pidfile }}

;;;
;;; Where to wait for clients
;;;

; ip address or * which means all ip-s
listen_addr = {{ _pgbouncer.listen_addr }}
listen_port = {{ _pgbouncer.listen_port }}

; unix socket is also used for -R.
; On debian it should be /var/run/postgresql
unix_socket_dir = {{ _pgbouncer.unix_socket_dir }}
unix_socket_mode = {{ _pgbouncer.unix_socket_mode }}
unix_socket_group = {{ _pgbouncer.unix_socket_group }}

;;;
;;; Authentication settings
;;;

; any, trust, plain, crypt, md5
auth_type = {{ _pgbouncer.auth_type }}
auth_file = {{ _pgbouncer.auth_file }}

;; HBA configuration file to use when auth_type is hba.
;; Supported from version 1.7 onwards.
auth_hba_file = {{ _pgbouncer.auth_hba_file }}

;; Query to use to fetch password from database.  Result
;; must have 2 columns - username and password hash.
auth_query = {{ _pgbouncer.auth_query }}

;;;
;;; Users allowed into database 'pgbouncer'
;;;

; comma-separated list of users, who are allowed to change settings
admin_users = {{ _pgbouncer.admin_users | join(', ') }}

; comma-separated list of users who are just allowed to use SHOW command
stats_users = {{ _pgbouncer.stats_users | join(', ') }}

;;;
;;; Pooler personality questions
;;;

; When server connection is released back to pool:
;   session      - after client disconnects
;   transaction  - after transaction finishes
;   statement    - after statement finishes
pool_mode = {{ _pgbouncer.pool_mode }}

;
; Query for cleaning connection immediately after releasing from client.
; No need to put ROLLBACK here, pgbouncer does not reuse connections
; where transaction is left open.
;
; Query for 8.3+:
;   DISCARD ALL;
;
; Older versions:
;   RESET ALL; SET SESSION AUTHORIZATION DEFAULT
;
; Empty if transaction pooling is in use.
;
server_reset_query = {{ _pgbouncer.server_reset_query }}


; Whether server_reset_query should run in all pooling modes.
; If it is off, server_reset_query is used only for session-pooling.
server_reset_query_always = {{ _pgbouncer.server_reset_query_always }}

;
; Comma-separated list of parameters to ignore when given
; in startup packet.  Newer JDBC versions require the
; extra_float_digits here.
;
ignore_startup_parameters = {{ _pgbouncer.ignore_startup_parameters }}

;
; When taking idle server into use, this query is ran first.
;   SELECT 1
;
server_check_query = {{ _pgbouncer.server_check_query }}

; If server was used more recently that this many seconds ago,
; skip the check query.  Value 0 may or may not run in immediately.
server_check_delay = {{ _pgbouncer.server_check_delay }}

;; Use <appname - host> as application_name on server.
application_name_add_host = {{ _pgbouncer.application_name_add_host }}

;;;
;;; Connection limits
;;;

; total number of clients that can connect
max_client_conn = {{ _pgbouncer.max_client_conn }}

; default pool size.  20 is good number when transaction pooling
; is in use, in session pooling it needs to be the number of
; max clients you want to handle at any moment
default_pool_size = {{ _pgbouncer.default_pool_size }}

;; Minimum number of server connections to keep in pool.
min_pool_size = {{ _pgbouncer.min_pool_size }}

; how many additional connection to allow in case of trouble
reserve_pool_size = {{ _pgbouncer.reserve_pool_size }}

; if a clients needs to wait more than this many seconds, use reserve pool
reserve_pool_timeout = {{ _pgbouncer.reserve_pool_timeout }}

; how many total connections to a single database to allow from all pools
{% if _pgbouncer.max_db_connections != -1 %}
max_db_connections = {{ _pgbouncer.max_db_connections }}
{% endif %}
{% if _pgbouncer.max_user_connections != -1 %}
max_user_connections = {{ _pgbouncer.max_user_connections }}
{% endif %}

; If off, then server connections are reused in LIFO manner
server_round_robin = {{ _pgbouncer.server_round_robin }}

;;;
;;; Logging
;;;

;; Syslog settings
syslog = {{ _pgbouncer.syslog }}
syslog_facility = {{ _pgbouncer.syslog_facility }}
syslog_ident = {{ _pgbouncer.syslog_ident }}

; log if client connects or server connection is made
log_connections = {{ _pgbouncer.log_connections }}

; log if and why connection was closed
log_disconnections = {{ _pgbouncer.log_disconnections }}

; log error messages pooler sends to clients
log_pooler_errors = {{ _pgbouncer.log_pooler_errors }}

;; Period for writing aggregated stats into log.
stats_period = {{ _pgbouncer.stats_period }}

;; Logging verbosity.  Same as -v switch on command line.
verbose = {{ _pgbouncer.verbose }}

;;;
;;; Timeouts
;;;

;; Close server connection if its been connected longer.
server_lifetime = {{ _pgbouncer.server_lifetime }}

;; Close server connection if its not been used in this time.
;; Allows to clean unnecessary connections from pool after peak.
server_idle_timeout = {{ _pgbouncer.server_idle_timeout }}

;; Cancel connection attempt if server does not answer takes longer.
server_connect_timeout = {{ _pgbouncer.server_connect_timeout }}

;; If server login failed (server_connect_timeout or auth failure)
;; then wait this many second.
server_login_retry = {{ _pgbouncer.server_login_retry }}

;; Dangerous.  Server connection is closed if query does not return
;; in this time.  Should be used to survive network problems,
;; _not_ as statement_timeout. (default: 0)
query_timeout = {{ _pgbouncer.query_timeout }}

;; Dangerous.  Client connection is closed if the query is not assigned
;; to a server in this time.  Should be used to limit the number of queued
;; queries in case of a database or network failure. (default: 120)
query_wait_timeout = {{ _pgbouncer.query_wait_timeout }}

;; Dangerous.  Client connection is closed if no activity in this time.
;; Should be used to survive network problems. (default: 0)
client_idle_timeout = {{ _pgbouncer.client_idle_timeout }}

;; Disconnect clients who have not managed to log in after connecting
;; in this many seconds.
client_login_timeout = {{ _pgbouncer.client_login_timeout }}

;; Clean automatically created database entries (via "*") if they
;; stay unused in this many seconds.
autodb_idle_timeout = {{ _pgbouncer.autodb_idle_timeout }}

;; How long SUSPEND/-R waits for buffer flush before closing connection.
suspend_timeout = {{ _pgbouncer.suspend_timeout }}

;; Close connections which are in "IDLE in transaction" state longer than
;; this many seconds.
idle_transaction_timeout = {{ _pgbouncer.idle_transaction_timeout }}

;;;
;;; Low-level tuning options
;;;

;; buffer for streaming packets
pkt_buf = {{ _pgbouncer.pkt_buf }}

;; man 2 listen
listen_backlog = {{ _pgbouncer.listen_backlog }}

;; Max number pkt_buf to process in one event loop.
sbuf_loopcnt = {{ _pgbouncer.sbuf_loopcnt }}

;; Maximum Postgres protocol packet size.
max_packet_size = {{ _pgbouncer.max_packet_size }}

;; networking options, for info: man 7 tcp

;; Linux: notify program about new connection only if there
;; is also data received.  (Seconds to wait.)
;; On Linux the default is 45, on other OS'es 0.
tcp_defer_accept = {{ _pgbouncer.tcp_defer_accept }}

;; In-kernel buffer size (Linux default: 4096)
tcp_socket_buffer = {{ _pgbouncer.tcp_socket_buffer }}

;; whether tcp keepalive should be turned on (0/1)
tcp_keepalive = {{ _pgbouncer.tcp_keepalive }}

;; following options are Linux-specific.
;; they also require tcp_keepalive=1

;; count of keepaliva packets
tcp_keepcnt = {{ _pgbouncer.tcp_keepcnt }}

;; how long the connection can be idle,
;; before sending keepalive packets
tcp_keepidle = {{ _pgbouncer.tcp_keepidle }}

;; The time between individual keepalive probes.
tcp_keepintvl = {{ _pgbouncer.tcp_keepintvl }}

;; DNS lookup caching time
dns_max_ttl = {{ _pgbouncer.dns_max_ttl }}

;; DNS zone SOA lookup period
dns_zone_check_period = {{ _pgbouncer.dns_zone_check_period }}

;; DNS negative result caching time
dns_nxdomain_ttl = {{ _pgbouncer.dns_nxdomain_ttl }}

;;;
;;; Random stuff
;;;

;; Hackish security feature.  Helps against SQL-injection - when PQexec is disabled,
;; multi-statement cannot be made.
disable_pqexec = {{ _pgbouncer.disable_pqexec }}

;; Config file to use for next RELOAD/SIGHUP.
;; By default contains config file from command line.
;conffile

;; Win32 service name to register as.  job_name is alias for service_name,
;; used by some Skytools scripts.
;; service_name = {{ _pgbouncer.service_name }} ;; In GPDB 6.x  ERROR unknown parameter: pgbouncer/service_name
job_name = {{ _pgbouncer.job_name }}

;; Read additional config from the /etc/pgbouncer/pgbouncer-other.ini file
;%include /etc/pgbouncer/pgbouncer-other.ini
