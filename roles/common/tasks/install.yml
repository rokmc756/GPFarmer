---
# Fail if OS is not supportable
- name: Check OS (common)
  fail: msg="{{ ansible_distribution }} is not supported for this ansible playbook!"
  when: ansible_distribution != "RedHat" and ansible_distribution != "CentOS" and ansible_distribution != "Rocky" and ansible_distribution != "Ubuntu" and ansible_distribution != "Debian"

#
- name: Check if systemd is used (1)
  stat: path=/run/systemd/system
  register: systemd_exists
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )

#
- name: Check if systemd is used (2)
  fail: msg="systemd is not installed"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and systemd_exists.stat.exists != True

# Update package cache - required for any new software installation
- name: Update Package Cache
  package: name=* state=latest update_cache=yes
  when: update_cache == true and (  ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )

# Upgrade packages to latest version
- name: Upgrade All Packages
  package: name=* state=latest update_cache=yes
  when: upgrade_packages == true and ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )

#
- name: Restart system after upgrade packages
  hostname: name={{ inventory_hostname }}
  notify:
    - Restart system
    - Waiting for server to come back after restart

#
- set_fact:
    gpdb_network_range: "{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] + '/' + hostvars[inventory_hostname]['ansible_eth0']['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"

#
- name: Get the specific ip address
  set_fact:
    prod_ip_addr_range: "{{ item }}"
  with_items: "{{ ansible_all_ipv4_addresses }}"
  when: "item | ansible.utils.ipaddr( gpdb_network_range )"

#
- name: Install firewalld
  package: name={{ item }} state=present
  with_items:
    - firewalld
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 7

#
- name: Stop and disable firewalld
  become: true
  become_user: root
  service:
    name: firewalld
    state: stopped
    enabled: False
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 7

#
- name: Clean rules on all chains of filter table
  become: true
  become_user: root
  iptables:
    chain: "{{ item }}"
    flush: yes
  with_items:  [ 'INPUT', 'FORWARD', 'OUTPUT' ]

#
- set_fact:
    rhel_install_packages: "{{ rhel_common_packages ~ ',' ~ rhel_common_devel_packages  ~ ',' ~ rhel7_common_devel_packages }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int <= 7

#
- set_fact:
    rhel_install_packages: "{{ rhel_common_packages ~ ',' ~ rhel_common_devel_packages  ~ ',' ~ rhel8_common_devel_packages }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int >= 8

#
- name: Install Dependent RPM packages for Greenplum in RedHat/CentOS/Rocky Linux
  package:
    name: "{{ rhel_install_packages }}"
    state: present
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )

#
- name: Install basic dependent packages for Ubuntu or Debian
  package:
    name: "{{ ubt_common_packages }}"
    state: present
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

#
- name: Install development packages for Ubuntu or Debian
  package:
    name: "{{ ubt_common_devel_packages }}"
    state: present
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# source: https://github.com/rpm-software-management/yum-utils/blob/master/needs-restarting.py
#- name: install Red Hat version of 'needs-restarting'
#  get_url:
#    url: https://raw.githubusercontent.com/rpm-software-management/yum-utils/master/needs-restarting.py
#    dest: /root/needs-restarting.py
#    mode: 0700
#  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# source: https://github.com/rpm-software-management/yum-utils/blob/master/needs-restarting.py
- name: Install Red Hat version of 'needs-restarting'
  copy:
    src: needs-restarting.py
    dest: /root/needs-restarting.py
    mode: 0700
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int <= 7

#
- name: Reboot required (Red Hat) - Step 1 in RHEL/CentOS/Rocky Linux 6 and 7
  command: /root/needs-restarting.py -r
  register: reboot_required
  ignore_errors: True
  changed_when: False
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int <= 7

#
- name: Reboot required (Red Hat) - Step 1 in RHEL/CentOS/Rocky Linux 8
  command: /usr/bin/needs-restarting -r
  register: reboot_required
  ignore_errors: True
  changed_when: False
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int >= 8

#
- name: Reboot required (Red Hat) - Step 2
  shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible updates triggered" ) &
  async: 120
  poll: 0
  ignore_errors: true
  notify:
    - Waiting for server to come back after restart
  when: ( reboot_required.rc == 1 and ansible_distribution_major_version|int <= 8 ) and ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )

- meta: flush_handlers
