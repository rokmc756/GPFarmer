---

# for now fail if it's not a Red Hat based system
- name: Check OS (common)
  fail: msg="Not a Red Hat based system!"
  when: ansible_distribution != "RedHat" and ansible_distribution != "CentOS" and ansible_distribution != "Rocky"

- name: check if systemd is used (1)
  stat: path=/run/systemd/system
  register: systemd_exists
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" and ansible_distribution_major_version is version_compare('6', '>')

- name: check if systemd is used (2)
  fail: msg="systemd is not installed"
  when: systemd_exists.stat.exists != True and ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version is version_compare('6', '>')

# update package cache - required for any new software installation
- name: Update yum cache
  yum: name=* state=latest update_cache=yes
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" == ansible_distribution == "Rocky"

# update packages to latest version
- name: upgrade all packages
  yum: name=* state=latest update_cache=yes
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" == ansible_distribution == "Rocky"

#  hostname: name={{ hostname }}
- name: Hostname
  hostname: name={{ inventory_hostname }}
  notify:
    - restart system
    - waiting for server to come back after restart

- name: Get the specific ip address
  set_fact:
    prod_ip_addr: "{{ item }}"
  when: "item | ipaddr('{{ common_network_range }}')"
  with_items: "{{ ansible_all_ipv4_addresses }}"

- name: basic packages
  yum: name={{ item }} state=present
  with_items:
    - vim-enhanced
    - nano
    - screen
    - psmisc
    - rsync
    - wget
    - mutt
    - yum-utils
    - unzip
    - net-tools
    - ed
    - m4
    - expect
    - nc
    - java-1.8.0-openjdk
    - java-1.8.0-openjdk-devel
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int >= 5
  #  - pexpect

- name: Install development packages
  yum: name={{ item.package }}
       state=present
  with_items:
    - { package: automake }
    - { package: make }
    - { package: gcc-c++ }
    - { package: gcc }
    - { package: ed }
    - { package: lsof }
    - { package: python-setuptools }
    - { package: python-paramiko }
    - { package: git }
    - { package: PyYAML }
    - { package: perl-ExtUtils-MakeMaker }
    - { package: zlib }
    - { package: zlib-devel }
    - { package: curl }
    - { package: curl-devel }
    - { package: openssl }
    - { package: openssl-devel }
    - { package: svn }
    - { package: tcl }
    - { package: gettext }
    - { package: expat-devel }
    - { package: gettext-devel }
    - { package: bison }
    - { package: flex }
    - { package: perl-ExtUtils-Embed }
    - { package: perl-ExtUtils-MakeMaker }
    - { package: readline }
    - { package: readline-devel }
    - { package: apr }
    - { package: apr-devel }
    - { package: apr-util }
    - { package: apr-util-devel }
    - { package: libevent }
    - { package: libxml2 }
    - { package: libxml2-devel }
    - { package: bzip2 }
    - { package: bzip2-devel }
    - { package: libyaml }
    - { package: python-devel }
    - { package: net-snmp }
    - { package: net-snmp-devel }
    - { package: net-snmp-utils }
    - { package: net-snmp-libs }
    - { package: liblockfile }
    - { package: ccache }
    - { package: python-lockfile }
    - { package: python-psutil }
    - { package: python-scp }
    - { package: xml2 }
    - { package: docbook2X }
    - { package: xmlto }
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int == 7

# source: https://github.com/rpm-software-management/yum-utils/blob/master/needs-restarting.py
#- name: install Red Hat version of 'needs-restarting'
#  get_url:
#    url: https://raw.githubusercontent.com/rpm-software-management/yum-utils/master/needs-restarting.py
#    dest: /root/needs-restarting.py
#    mode: 0700
#  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

# source: https://github.com/rpm-software-management/yum-utils/blob/master/needs-restarting.py
- name: install Red Hat version of 'needs-restarting'
  copy:
    src: needs-restarting.py
    dest: /root/needs-restarting.py
    mode: 0700
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky"

- name: Reboot required (Red Hat) - Step 1
  command: /root/needs-restarting.py -r
  register: reboot_required
  ignore_errors: True
  changed_when: False

- name: Reboot required (Red Hat) - Step 2
  shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible updates triggered" ) &
  async: 120
  poll: 0
  ignore_errors: true
  notify:
    - waiting for server to come back after restart
  when: reboot_required.rc == 1

- meta: flush_handlers
